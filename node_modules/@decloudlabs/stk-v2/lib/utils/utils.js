"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callContractWrite = exports.replaceModVariable = exports.verifyModVariables = exports.findAttribVars = exports.formatAppParams = exports.getBlockTimestamp = exports.hexToString = exports.parse = exports.apiCallWrapper = exports.sleep = exports.URSULA_CFRAGS_API_URL = exports.ROLE_THRESHOLD_API_URL = exports.OWNER_THRESHOLD_API_URL = void 0;
exports.OWNER_THRESHOLD_API_URL = "api/v1/re-encryption";
exports.ROLE_THRESHOLD_API_URL = "api/v1/re-encryption/role";
exports.URSULA_CFRAGS_API_URL = "api/v1/re-encryption";
function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
exports.sleep = sleep;
var apiCallWrapper = function (apiCall, format, modifyRet) { return __awaiter(void 0, void 0, void 0, function () {
    var retVal, resp, err_1, error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, apiCall];
            case 1:
                resp = _a.sent();
                if (modifyRet) {
                    retVal = modifyRet({ resp: resp, success: true });
                }
                else {
                    retVal = {
                        success: true,
                        data: format(resp),
                    };
                }
                return [3 /*break*/, 3];
            case 2:
                err_1 = _a.sent();
                error = err_1;
                if (modifyRet) {
                    retVal = modifyRet({ resp: error, success: false });
                }
                else {
                    retVal = {
                        success: false,
                        data: error,
                    };
                }
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/, retVal];
        }
    });
}); };
exports.apiCallWrapper = apiCallWrapper;
exports.parse = {
    getSubnetAttributes: function (values) {
        return {
            CLUSTER_LIST_ROLE: values.CLUSTER_LIST_ROLE,
            PRICE_ROLE: values.PRICE_ROLE,
            SUBNET_ATTR_ROLE: values.SUBNET_ATTR_ROLE,
            SUBNET_DAO_ROLE: values.SUBNET_DAO_ROLE,
            WHITELIST_ROLE: values.WHITELIST_ROLE,
            dnsip: values.dnsip,
            maxClusters: values.maxClusters,
            otherAttributes: values.otherAttributes,
            publicKey: values.publicKey,
            stackFeesReqd: values.stackFeesReqd,
            subnetLocalDAO: values.subnetLocalDAO,
            subnetName: values.subnetName,
            subnetStatusListed: values.subnetStatusListed,
            subnetType: values.subnetType,
        };
    },
    getAllSubnetNamesAndIDs: function (values) {
        return values.map(function (el) { return ({
            subnetName: el.subnetName,
            subnetID: el.subnetID,
        }); });
    },
    getClusterAttributes: function (values) {
        return values;
    },
    getSubscribedSubnetsOfNFT: function (_a) {
        var values = __rest(_a, []);
        return values[0]
            .filter(function (el, index) { return values[index]; })
            .map(function (el) { return el; });
    },
    getApp: function (appObj) {
        var app = appObj.app;
        var multiplier = appObj.currentReplica.map(function (currentReplica) {
            return currentReplica.map(function (replica) { return Number(replica); });
        });
        var appDataCID = app.path[0];
        appDataCID = Buffer.from(appDataCID.substring(2), "hex").toString();
        appDataCID = appDataCID.substring(1);
        var modifiedDataCID = app.path[1];
        modifiedDataCID = Buffer.from(modifiedDataCID.substring(2), "hex").toString();
        modifiedDataCID = modifiedDataCID.substring(1);
        var resourceType = app.resourceType.map(function (resource) {
            return Number(resource);
        });
        var resourceCount = app.resourceCount.map(function (resource) {
            return Number(resource);
        });
        var subnetList = appObj.subnetList.map(function (subnet) {
            return Number(subnet);
        });
        return {
            appID: Number(appObj.appID),
            appName: (0, exports.hexToString)(app.appName),
            appDataCID: appDataCID,
            modifiedDataCID: modifiedDataCID,
            subnetList: subnetList,
            resourceType: resourceType,
            resourceCount: resourceCount,
            cidLock: app.cidLock,
            multiplier: multiplier,
            active: app.active,
        };
    },
};
var hexToString = function (hexx) {
    var hex = hexx.toString();
    var str = "";
    for (var i = 0; i < hex.length; i += 2) {
        var val = String.fromCharCode(parseInt(hex.substr(i, 2), 16));
        if (val.charCodeAt(0) > 0) {
            str += val;
        }
    }
    return str;
};
exports.hexToString = hexToString;
var getBlockTimestamp = function (time) {
    if (time === void 0) { time = "60"; }
    var deadline = parseInt(time, 10);
    var currentTime = Math.floor(Date.now() / 1000 + deadline);
    return currentTime;
};
exports.getBlockTimestamp = getBlockTimestamp;
var formatAppParams = function (nftID, contractApp) {
    var appPath, modPath;
    appPath = Buffer.from(contractApp.app.path[0].substring(2), "hex").toString();
    appPath = appPath.substring(1);
    modPath = Buffer.from(contractApp.app.path[1].substring(2), "hex").toString();
    modPath = modPath.substring(1);
    var app = {
        nftID: nftID,
        appID: contractApp.appID.toString(),
        subnetList: contractApp.subnetList.map(function (subnetID) {
            return subnetID.toString();
        }),
        multiplier: contractApp.currentReplica.map(function (mulArr) {
            return mulArr.map(function (mul) { return Number(mul); });
        }),
        appName: (0, exports.hexToString)(contractApp.app.appName),
        // appPath: contractApp[3][2][0],
        // modPath: contractApp[3][2][1],
        appPath: appPath,
        modPath: modPath,
        resourceCount: contractApp.app.resourceCount.map(function (res) {
            return Number(res);
        }),
        resourceType: contractApp.app.resourceType.map(function (res) {
            return Number(res);
        }),
        cidLock: contractApp.app.cidLock,
    };
    return app;
};
exports.formatAppParams = formatAppParams;
var searchPayload = function (payload, replaceFunc) {
    if (!payload)
        return;
    var keyList = Object.keys(payload);
    var modParam = {};
    for (var _i = 0, keyList_1 = keyList; _i < keyList_1.length; _i++) {
        var objKey = keyList_1[_i];
        if (objKey === "attribVarList")
            continue;
        else if (objKey === "persistenceEnabled" ||
            objKey === "privateImage" ||
            objKey === "statefulSet")
            continue;
        else if (typeof payload[objKey] === "string") {
            payload[objKey] = replaceFunc(payload[objKey]);
        }
        else if (Array.isArray(payload[objKey]) && payload[objKey].length) {
            if (typeof payload[objKey] === "string") {
                for (var i = 0; i < payload[objKey].length; i++) {
                    payload[objKey] = replaceFunc(payload[objKey]);
                }
            }
            else {
                console.log("cur key: ", objKey, payload[objKey]);
                for (var i = 0; i < payload[objKey].length; i++) {
                    payload[objKey] = searchPayload(payload[objKey], replaceFunc);
                }
            }
        }
        else if (typeof payload[objKey] === "object") {
            payload[objKey] = searchPayload(payload[objKey], replaceFunc);
        }
    }
    return payload;
};
var findAttribVars = function (payload) {
    var nameList = [];
    var checkAttrib = function (field) {
        var pattern = new RegExp("\\$\\{[a-zA-Z]+[a-zA-Z0-9]*\\}", "g");
        var modVarMatchList = field.match(pattern);
        if (modVarMatchList) {
            for (var i = 0; i < modVarMatchList.length; i++) {
                var varName = modVarMatchList[i];
                varName = varName.substring(varName.indexOf("{") + 1, varName.indexOf("}"));
                nameList.push(varName);
            }
        }
        return field;
    };
    searchPayload(payload, checkAttrib);
    return nameList;
};
exports.findAttribVars = findAttribVars;
var verifyModVariables = function (payload, modVar) {
    var condition = payload.condition;
    var keyList = Object.keys(condition);
    for (var _i = 0, keyList_2 = keyList; _i < keyList_2.length; _i++) {
        var keyObj = keyList_2[_i];
        if (!new RegExp(condition[keyObj]).test(modVar[keyObj])) {
            return {
                status: false,
                modVarName: keyObj,
                message: payload.conditionDescription[keyObj],
            };
        }
    }
    return {
        status: true,
    };
};
exports.verifyModVariables = verifyModVariables;
var replaceModVariable = function (payload, modValues) {
    if (!payload.attribVarList)
        return payload;
    var defaultValueMap = {};
    for (var i = 0; i < payload.attribVarList.length; i++) {
        var attrib = payload.attribVarList[i];
        if (attrib.defaultValue)
            defaultValueMap[attrib.name] = attrib.defaultValue;
    }
    modValues = __assign(__assign({}, defaultValueMap), modValues);
    function findAndAddModVar(attrib) {
        var pattern = new RegExp("\\$\\{[a-zA-Z]+[a-zA-Z0-9]*\\}", "g");
        var indexList = [];
        var matchVarNameList = [];
        var nameRes = pattern.exec(attrib);
        while (nameRes) {
            indexList.push(pattern.lastIndex - nameRes[0].length);
            matchVarNameList.push(nameRes[0]);
            nameRes = pattern.exec(attrib);
        }
        if (indexList.length == 0)
            return attrib;
        var newAttrib = "";
        var indexScanner = 0;
        for (var i = 0; i < indexList.length; i++) {
            var curIndex = indexList[i];
            var matchVarName = matchVarNameList[i];
            var varName = matchVarName.substring(2, matchVarName.length - 1);
            newAttrib +=
                attrib.substring(indexScanner, curIndex) + modValues[varName];
            indexScanner = curIndex + matchVarName.length;
        }
        newAttrib += attrib.substring(indexScanner, attrib.length);
        return newAttrib;
    }
    return searchPayload(payload, findAndAddModVar);
};
exports.replaceModVariable = replaceModVariable;
var callContractWrite = function (apiCall) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.apiCallWrapper)((function () { return __awaiter(void 0, void 0, void 0, function () {
                    var tr, rc;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, apiCall];
                            case 1:
                                tr = _a.sent();
                                return [4 /*yield*/, tr.wait()];
                            case 2:
                                rc = _a.sent();
                                return [2 /*return*/, rc];
                        }
                    });
                }); })(), function (res) { return res.transactionHash; })];
            case 1:
                result = _a.sent();
                return [2 /*return*/, result];
        }
    });
}); };
exports.callContractWrite = callContractWrite;
