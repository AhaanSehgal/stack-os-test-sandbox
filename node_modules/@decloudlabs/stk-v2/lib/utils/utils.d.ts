import { APIResponse, APICallReturn, SubnetAttributes, SubnetNameAndID, ContractApp, AppPayload } from "../types/types";
import { ContractTransaction } from "ethers";
export declare const OWNER_THRESHOLD_API_URL = "api/v1/re-encryption";
export declare const ROLE_THRESHOLD_API_URL = "api/v1/re-encryption/role";
export declare const URSULA_CFRAGS_API_URL = "api/v1/re-encryption";
export type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare function sleep(ms: number): Promise<unknown>;
export declare const apiCallWrapper: <K, T, E = Error>(apiCall: Promise<K>, format: (rowList: K) => T, modifyRet?: ((param: APIResponse<K, E>) => APICallReturn<T, E>) | undefined) => Promise<APICallReturn<T, E>>;
export declare const parse: {
    getSubnetAttributes(values: SubnetAttributes): {
        CLUSTER_LIST_ROLE: string;
        PRICE_ROLE: string;
        SUBNET_ATTR_ROLE: string;
        SUBNET_DAO_ROLE: string;
        WHITELIST_ROLE: string;
        dnsip: string;
        maxClusters: number;
        otherAttributes: any;
        publicKey: string;
        stackFeesReqd: string;
        subnetLocalDAO: string;
        subnetName: string;
        subnetStatusListed: string;
        subnetType: string;
    };
    getAllSubnetNamesAndIDs(values: SubnetNameAndID[]): {
        subnetName: string;
        subnetID: string;
    }[];
    getClusterAttributes(values: any): any;
    getSubscribedSubnetsOfNFT({ ...values }: any): any;
    getApp(appObj: any): {
        appID: number;
        appName: string;
        appDataCID: any;
        modifiedDataCID: any;
        subnetList: any;
        resourceType: any;
        resourceCount: any;
        cidLock: any;
        multiplier: any;
        active: any;
    };
};
export declare const hexToString: (hexx: string) => string;
export declare const getBlockTimestamp: (time?: string) => number;
export declare const formatAppParams: (nftID: string, contractApp: any) => ContractApp;
export declare const findAttribVars: (payload: any) => string[];
export declare const verifyModVariables: (payload: any, modVar: any) => {
    status: boolean;
    modVarName?: string;
    message?: string;
};
export declare const replaceModVariable: (payload: AppPayload, modValues: {
    [key: string]: string;
}) => any;
export declare const callContractWrite: (apiCall: Promise<ContractTransaction>) => Promise<APICallReturn<string>>;
