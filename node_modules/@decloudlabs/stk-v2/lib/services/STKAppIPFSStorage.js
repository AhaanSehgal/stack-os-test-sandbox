"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var STKAppStorage_1 = require("./STKAppStorage");
var it_all_1 = __importDefault(require("it-all"));
var ipfs_http_client_1 = __importDefault(require("ipfs-http-client"));
var buffer_1 = require("buffer");
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("../utils/utils");
var STKAppIPFSStorage = /** @class */ (function (_super) {
    __extends(STKAppIPFSStorage, _super);
    function STKAppIPFSStorage(appCache) {
        var _this = _super.call(this, appCache) || this;
        _this.ipfsConfig = null;
        _this.getIPFSConfig = function () {
            if (!_this.ipfsConfig)
                throw new Error("IPFSConfig not initialized");
            return _this.ipfsConfig;
        };
        _this.createIPFSDir = function (CID, nftID, appName, path) {
            if (CID === void 0) { CID = ""; }
            if (path === void 0) { path = ""; }
            return "".concat(CID ? CID + "/" : "", "nftID/").concat(nftID, "/app/").concat(appName.toLowerCase()).concat(path);
        };
        return _this;
    }
    STKAppIPFSStorage.prototype.sendApp = function (nftID, appID, appPayload, cidLock, appModifier) {
        throw new Error("Method not implemented.");
    };
    STKAppIPFSStorage.prototype.initIPFS = function (projectId, secret) {
        return __awaiter(this, void 0, void 0, function () {
            var auth;
            return __generator(this, function (_a) {
                auth = "Basic " + buffer_1.Buffer.from(projectId + ":" + secret).toString("base64");
                this.ipfsConfig = ipfs_http_client_1.default.create({
                    host: "ipfs.infura.io",
                    port: 5001,
                    protocol: "https",
                    headers: {
                        authorization: auth,
                    },
                });
                return [2 /*return*/, this.ipfsConfig];
            });
        });
    };
    STKAppIPFSStorage.prototype.callIPFSAddAll = function (pushList) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, utils_1.apiCallWrapper)((0, it_all_1.default)(this.getIPFSConfig().addAll(pushList, {
                            wrapWithDirectory: false,
                        })), function (res) { return res; })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.callIPFSCat = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, utils_1.apiCallWrapper)((0, it_all_1.default)(this.getIPFSConfig().cat(path)), function (res) { return res; })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.getEncryptedApp = function (contractApp) {
        return __awaiter(this, void 0, void 0, function () {
            var appPath, modPath, nftID, appName, subnetList, pathPrefix, appModifierPath, paths, dataPromises, promiseAllResp, creator, reader, capsuleBytes, cipherTextBytes, ursulaParams, encryptedApp, _i, subnetList_1, subnetID, kFragsPath, ursulaKFrag;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appPath = contractApp.appPath, modPath = contractApp.modPath, nftID = contractApp.nftID, appName = contractApp.appName, subnetList = contractApp.subnetList;
                        pathPrefix = this.createIPFSDir(appPath, nftID, appName);
                        appModifierPath = this.createIPFSDir(modPath, nftID, appName);
                        paths = {
                            creator: "".concat(pathPrefix, "/creator"),
                            reader: "".concat(pathPrefix, "/reader"),
                            capsule: "".concat(pathPrefix, "/capsule"),
                            cipherText: "".concat(pathPrefix, "/cipherText"),
                            ursulaParams: "".concat(pathPrefix, "/ursulaParams"),
                            appModifierCipher: "".concat(appModifierPath, "/cipherText"),
                            appModifierCapsule: "".concat(appModifierPath, "/capsule"),
                        };
                        dataPromises = [
                            this.readFile(paths.creator),
                            this.readFile(paths.reader),
                            this.readFile(paths.capsule),
                            this.readFile(paths.cipherText),
                            this.readFile(paths.ursulaParams),
                            this.readFile(paths.appModifierCapsule),
                            this.readFile(paths.appModifierCipher),
                        ];
                        return [4 /*yield*/, Promise.all(dataPromises)];
                    case 1:
                        promiseAllResp = _a.sent();
                        creator = promiseAllResp[0], reader = promiseAllResp[1], capsuleBytes = promiseAllResp[2], cipherTextBytes = promiseAllResp[3], ursulaParams = promiseAllResp[4];
                        encryptedApp = {
                            creator: creator,
                            reader: reader,
                            capsule: capsuleBytes,
                            cipherText: cipherTextBytes,
                            subnetKFragMap: {},
                            ursulaParams: ursulaParams,
                        };
                        _i = 0, subnetList_1 = subnetList;
                        _a.label = 2;
                    case 2:
                        if (!(_i < subnetList_1.length)) return [3 /*break*/, 5];
                        subnetID = subnetList_1[_i];
                        kFragsPath = "".concat(appModifierPath, "/subnetCluster/").concat(subnetID, "/kFrags");
                        return [4 /*yield*/, this.readFile(kFragsPath)];
                    case 3:
                        ursulaKFrag = _a.sent();
                        ursulaKFrag = ursulaKFrag.map(function (singleFrag) { return (__assign(__assign({}, singleFrag), { kfrag: new Uint8Array(Object.values(singleFrag.kfrag)) })); });
                        encryptedApp.subnetKFragMap[subnetID] = ursulaKFrag;
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, {
                            success: true,
                            data: encryptedApp,
                        }];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.getEncryptedAppModifier = function (contractApp) {
        return __awaiter(this, void 0, void 0, function () {
            var appPath, modPath, nftID, appName, subnetList, appModifierPath, paths, dataPromises, _a, appModifierCapsuleBytes, appModifierCipherBytes, encryptedAppModifier;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appPath = contractApp.appPath, modPath = contractApp.modPath, nftID = contractApp.nftID, appName = contractApp.appName, subnetList = contractApp.subnetList;
                        appModifierPath = this.createIPFSDir(modPath, nftID, appName);
                        paths = {
                            appModifierCipher: "".concat(appModifierPath, "/cipherText"),
                            appModifierCapsule: "".concat(appModifierPath, "/capsule"),
                        };
                        dataPromises = [
                            this.readFile(paths.appModifierCapsule),
                            this.readFile(paths.appModifierCipher),
                        ];
                        return [4 /*yield*/, Promise.all(dataPromises)];
                    case 1:
                        _a = _b.sent(), appModifierCapsuleBytes = _a[0], appModifierCipherBytes = _a[1];
                        encryptedAppModifier = {
                            capsule: appModifierCapsuleBytes,
                            cipherText: appModifierCipherBytes,
                        };
                        return [2 /*return*/, {
                                success: true,
                                data: encryptedAppModifier,
                            }];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.sendEncryptedApp = function (appName, nftID, appID, encryptedApp, appModifier, cidLock) {
        return __awaiter(this, void 0, void 0, function () {
            var pathPrefix, pathList, contentList, subnetKFragMap, subnetList, i, subnetID, kfrags, pushList, i, content, catResp, res, modCID, appCID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pathPrefix = this.createIPFSDir("", nftID, appName);
                        if (cidLock) {
                            pathList = [];
                            contentList = [];
                        }
                        else {
                            pathList = [
                                "appData/".concat(pathPrefix, "/creator"),
                                "appData/".concat(pathPrefix, "/reader"),
                                "appData/".concat(pathPrefix, "/capsule"),
                                "appData/".concat(pathPrefix, "/cipherText"),
                                "appData/".concat(pathPrefix, "/ursulaParams"),
                            ];
                            contentList = [
                                encryptedApp.creator,
                                encryptedApp.reader,
                                encryptedApp.capsule,
                                encryptedApp.cipherText,
                                encryptedApp.ursulaParams,
                            ];
                        }
                        subnetKFragMap = encryptedApp.subnetKFragMap;
                        subnetList = Object.keys(subnetKFragMap);
                        for (i = 0; i < subnetList.length; i++) {
                            subnetID = subnetList[i];
                            kfrags = subnetKFragMap[subnetID];
                            pathList.push("appModifier/".concat(pathPrefix, "/subnetCluster/").concat(subnetID, "/kFrags"));
                            contentList.push(kfrags);
                        }
                        if (appModifier) {
                            pathList.push("appModifier/".concat(pathPrefix, "/cipherText"));
                            contentList.push(appModifier.cipherText);
                            pathList.push("appModifier/".concat(pathPrefix, "/capsule"));
                            contentList.push(appModifier.capsule);
                        }
                        pushList = [];
                        for (i = 0; i < contentList.length; i++) {
                            content = JSON.stringify(contentList[i]);
                            content = buffer_1.Buffer.from(content);
                            pushList.push({
                                path: pathList[i],
                                content: content,
                            });
                        }
                        return [4 /*yield*/, this.callIPFSAddAll(pushList)];
                    case 1:
                        catResp = _a.sent();
                        if (!catResp.success)
                            return [2 /*return*/, catResp];
                        res = catResp.data;
                        modCID = res.find(function (elm) { return elm.path === "appModifier"; }).cid;
                        modCID = buffer_1.Buffer.from("0".concat(modCID.toString()), "utf8").toString("hex");
                        modCID = "0x".concat(modCID);
                        if (cidLock) {
                            return [2 /*return*/, {
                                    success: true,
                                    data: { appPath: "", modPath: modCID },
                                }];
                        }
                        else {
                            appCID = res.find(function (elm) { return elm.path === "appData"; }).cid;
                            appCID = buffer_1.Buffer.from("0".concat(appCID.toString()), "utf8").toString("hex");
                            appCID = "0x".concat(appCID);
                            return [2 /*return*/, {
                                    success: true,
                                    data: {
                                        appPath: appCID,
                                        modPath: modCID,
                                    },
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.sendAppToStorage = function (nftID, appID, appPayload, cidLock, appModifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        success: true,
                        data: {
                            appPath: "test",
                            modPath: "test",
                        },
                    }];
            });
        });
    };
    STKAppIPFSStorage.prototype.readFile = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var catResp, data, length_1, fullData_1, offset_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.callIPFSCat(path)];
                    case 1:
                        catResp = _a.sent();
                        if (!catResp.success)
                            return [2 /*return*/, catResp];
                        data = catResp.data;
                        length_1 = 0;
                        data.forEach(function (item) {
                            length_1 += item.length;
                        });
                        fullData_1 = new Uint8Array(length_1);
                        offset_1 = 0;
                        data.forEach(function (item) {
                            fullData_1.set(item, offset_1);
                            offset_1 += item.length;
                        });
                        data = fullData_1;
                        data = new TextDecoder().decode(data);
                        data = data.toString();
                        return [2 /*return*/, JSON.parse(data)];
                    case 2:
                        err_1 = _a.sent();
                        console.log("error : ", err_1.message);
                        return [4 /*yield*/, this.readFileFromPublicGateway(path)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.readFileWithInfura = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var data, length, fullData, offset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, it_all_1.default)(this.getIPFSConfig().cat(path))];
                    case 1:
                        data = _a.sent();
                        length = 0;
                        data.forEach(function (item) {
                            length += item.length;
                        });
                        fullData = new Uint8Array(length);
                        offset = 0;
                        data.forEach(function (item) {
                            fullData.set(item, offset);
                            offset += item.length;
                        });
                        data = fullData;
                        data = new TextDecoder().decode(data);
                        data = data.toString();
                        return [2 /*return*/, JSON.parse(data)];
                }
            });
        });
    };
    STKAppIPFSStorage.prototype.readFileFromPublicGateway = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var data, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("https://cf-ipfs.com/ipfs/".concat(path))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        err_2 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // fetchIPFSSubFilesInBulk = async (cid: string) => {
    //     try {
    //         const data: any = [];
    //         const decoder = new TextDecoder("utf-8");
    //         async function* tarballed(source: any) {
    //             yield* pipe(source, extract(), async function* (source: any) {
    //                 for await (const entry of source) {
    //                     yield {
    //                         ...entry,
    //                         body: await toBuffer(
    //                             entry.body.map((buf: any) => buf.slice())
    //                         ), // TODO : fix type
    //                     };
    //                 }
    //             });
    //         }
    //         const result = await pipe(
    //             this.getIPFSConfig().get(cid),
    //             tarballed,
    //             (source) => all(source)
    //         );
    //         for (let i = 0; i < result.length; i++) {
    //             if (result[i].body.length) {
    //                 let subPath = result[i].header.name;
    //                 subPath = subPath.includes("/")
    //                     ? subPath.split("/").slice(1).join("/")
    //                     : subPath;
    //                 data.push({
    //                     path: cid + "/" + subPath,
    //                     data: JSON.parse(decoder.decode(result[i].body)),
    //                 });
    //             }
    //         }
    //         return data;
    //     } catch (err: any) {
    //         console.error("Error: ", err.message);
    //         return false;
    //     }
    // };
    STKAppIPFSStorage.prototype.removeApp = function (appPath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // for await (const _cid of this.ipfsConfig.pin.rmAll(new IPFSClient.CID(appPath))) {
                //     console.log("unpined ", _cid);
                // }
                return [2 /*return*/, {
                        success: true,
                        data: "",
                    }];
            });
        });
    };
    STKAppIPFSStorage.prototype.getStorageIDForContract = function () {
        return 0;
    };
    return STKAppIPFSStorage;
}(STKAppStorage_1.STKAppStorage));
exports.default = STKAppIPFSStorage;
