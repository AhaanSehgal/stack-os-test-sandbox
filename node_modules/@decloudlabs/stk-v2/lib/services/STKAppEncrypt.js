"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var STKAppEncrypt = /** @class */ (function () {
    function STKAppEncrypt(ethKeyEncrypt, umbralService) {
        this.ethKeyEncrypt = ethKeyEncrypt;
        this.umbralService = umbralService;
    }
    STKAppEncrypt.prototype.encryptPayload = function (address, ursulaParams, payload, subnetPKMap) {
        return __awaiter(this, void 0, void 0, function () {
            var enc, shares, threshold, curAddress, umbral, creatorSK, creatorPK, creatorSigner, encryptedSecretKey, plainText, plainTextBytes, result, cipherText, capsule, subnetKFragMap, subnetList, _i, subnetList_1, subnetID, publicKey, subnetPK, subnetKFrags, encryptedSubnetKFrags, err_1, error, readerSK, readerPK, readerKFrags, encryptedKFrags, readerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        enc = new TextEncoder();
                        shares = ursulaParams.kfragCount;
                        threshold = ursulaParams.kfragThreshold;
                        curAddress = address;
                        umbral = this.umbralService.getUmbral();
                        creatorSK = umbral.SecretKey.random();
                        creatorPK = creatorSK.publicKey();
                        creatorSigner = new umbral.Signer(creatorSK);
                        return [4 /*yield*/, this.ethKeyEncrypt.encrypt(creatorSK.toSecretBytes().toString())];
                    case 1:
                        encryptedSecretKey = _a.sent();
                        if (encryptedSecretKey.success == false)
                            return [2 /*return*/, encryptedSecretKey];
                        plainText = JSON.stringify(payload);
                        plainTextBytes = enc.encode(plainText);
                        result = umbral.encrypt(creatorPK, plainTextBytes);
                        cipherText = result[1];
                        capsule = result[0];
                        subnetKFragMap = {};
                        subnetList = Object.keys(subnetPKMap);
                        _i = 0, subnetList_1 = subnetList;
                        _a.label = 2;
                    case 2:
                        if (!(_i < subnetList_1.length)) return [3 /*break*/, 7];
                        subnetID = subnetList_1[_i];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        publicKey = subnetPKMap[subnetID];
                        subnetPK = umbral.PublicKey.fromBytes(new Uint8Array(publicKey));
                        subnetKFrags = umbral.generateKFrags(creatorSK, subnetPK, creatorSigner, threshold, shares, true, true);
                        return [4 /*yield*/, this.encryptKfragsUsingUrsula(subnetKFrags, ursulaParams)];
                    case 4:
                        encryptedSubnetKFrags = _a.sent();
                        if (encryptedSubnetKFrags.success) {
                            subnetKFragMap[subnetID] = encryptedSubnetKFrags.data;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        error = err_1;
                        return [2 /*return*/, {
                                success: false,
                                data: error,
                            }];
                    case 6:
                        _i++;
                        return [3 /*break*/, 2];
                    case 7:
                        readerSK = umbral.SecretKey.random();
                        readerPK = readerSK.publicKey();
                        readerKFrags = umbral.generateKFrags(creatorSK, readerPK, creatorSigner, threshold, shares, true, true);
                        return [4 /*yield*/, this.encryptKfragsUsingUrsula(readerKFrags, ursulaParams)];
                    case 8:
                        encryptedKFrags = _a.sent();
                        if (encryptedKFrags.success == false)
                            return [2 /*return*/, encryptedKFrags];
                        readerData = {
                            kFragList: Array.from(encryptedKFrags.data),
                            publicKey: Array.from(readerPK.toBytes()),
                            secretKey: Array.from(readerSK.toSecretBytes()),
                        };
                        return [2 /*return*/, {
                                success: true,
                                data: {
                                    creator: {
                                        creatorAddress: curAddress,
                                        publicKey: Array.from(creatorPK.toBytes()),
                                        secretKey: Array.from(encryptedSecretKey.data),
                                    },
                                    ursulaParams: ursulaParams,
                                    reader: readerData,
                                    capsule: Array.from(capsule.toBytes()),
                                    cipherText: Array.from(cipherText),
                                    subnetKFragMap: subnetKFragMap,
                                },
                            }];
                }
            });
        });
    };
    STKAppEncrypt.prototype.encryptWithCreatorKey = function (payload, creatorKeys) {
        return __awaiter(this, void 0, void 0, function () {
            var enc, umbral, creatorPK, plainText, plainTextBytes, result, cipherText, capsule, error;
            return __generator(this, function (_a) {
                try {
                    enc = new TextEncoder();
                    umbral = this.umbralService.getUmbral();
                    creatorPK = this.umbralService.convertToUmbralPublicKey(creatorKeys.publicKey);
                    plainText = JSON.stringify(payload);
                    plainTextBytes = enc.encode(plainText);
                    result = umbral.encrypt(creatorPK, plainTextBytes);
                    cipherText = result[1];
                    capsule = result[0];
                    return [2 /*return*/, {
                            success: true,
                            data: {
                                cipherText: Array.from(cipherText),
                                capsule: Array.from(capsule.toBytes()),
                            },
                        }];
                }
                catch (err) {
                    error = err;
                    return [2 /*return*/, {
                            success: false,
                            data: err,
                        }];
                }
                return [2 /*return*/];
            });
        });
    };
    STKAppEncrypt.prototype.encryptApp = function (address, ursulaParams, appPayload, appModifier, subnetPKMap) {
        return __awaiter(this, void 0, void 0, function () {
            var encAppResp, encModResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.encryptPayload(address, ursulaParams, appPayload, subnetPKMap)];
                    case 1:
                        encAppResp = _a.sent();
                        if (encAppResp.success == false)
                            return [2 /*return*/, encAppResp];
                        return [4 /*yield*/, this.encryptWithCreatorKey(appModifier, encAppResp.data.creator)];
                    case 2:
                        encModResp = _a.sent();
                        if (encModResp.success == false)
                            return [2 /*return*/, encModResp];
                        return [2 /*return*/, {
                                success: true,
                                data: {
                                    appPayload: encAppResp.data,
                                    appModifier: encModResp.data,
                                },
                            }];
                }
            });
        });
    };
    STKAppEncrypt.prototype.encryptKfragsUsingUrsula = function (readerFrags, ursulaParams) {
        if (readerFrags === void 0) { readerFrags = []; }
        return __awaiter(this, void 0, void 0, function () {
            var ursulaPKList, encryptedFrags, index, readerFrag, ursulaPK, encryptedFrag;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ursulaPKList = ursulaParams.ursulaPKList;
                        encryptedFrags = [];
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < readerFrags.length)) return [3 /*break*/, 4];
                        readerFrag = readerFrags[index];
                        ursulaPK = ursulaPKList[index];
                        return [4 /*yield*/, this.ethKeyEncrypt.encryptWithPublicKey(readerFrag.toBytes().toString(), ursulaPK)];
                    case 2:
                        encryptedFrag = _a.sent();
                        if (encryptedFrag.success) {
                            encryptedFrags.push({
                                kfrag: Array.from(encryptedFrag.data),
                            });
                        }
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, {
                            success: true,
                            data: encryptedFrags,
                        }];
                }
            });
        });
    };
    return STKAppEncrypt;
}());
exports.default = STKAppEncrypt;
