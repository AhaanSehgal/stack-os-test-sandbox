import { APICallReturn, CachedAppModifier, CachedAppPayload, CachedEncryptedApp, CachedEncryptedAppModifier, ETHAddress } from "../types/types";
import { STKAppCache } from "./STKAppCache";
export default class STKAppBrowserCache extends STKAppCache {
    constructor();
    getCacheName: {
        cacheName: (address: ETHAddress, nftID: string) => string;
        encryptedApp: (nftID: string, appID: string) => string;
        encryptedAppModifier: (nftID: string, appID: string) => string;
        appPayload: (nftID: string, appID: string) => string;
        appModifier: (nftID: string, appID: string) => string;
    };
    setEncryptedApp(address: ETHAddress, nftID: string, appID: string, encryptedApp: CachedEncryptedApp): Promise<APICallReturn<string>>;
    setEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string, encAppModifier: CachedEncryptedAppModifier): Promise<APICallReturn<string>>;
    setAppPayload(address: ETHAddress, nftID: string, appID: string, appPayload: CachedAppPayload): Promise<APICallReturn<string>>;
    setAppModifier(address: ETHAddress, nftID: string, appID: string, appModifier: CachedAppModifier): Promise<APICallReturn<string>>;
    getEncryptedApp(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedEncryptedApp>>;
    getAppPayload(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedAppPayload>>;
    getEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedEncryptedAppModifier>>;
    getAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedAppModifier>>;
    deleteEncryptedApp(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    deleteAppPayload(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    deleteEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    deleteAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    private getDataFromCache;
    private setDataIntoCache;
}
