"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var STKAppCache_1 = require("./STKAppCache");
var STKAppBrowserCache = /** @class */ (function (_super) {
    __extends(STKAppBrowserCache, _super);
    function STKAppBrowserCache() {
        var _this = _super.call(this) || this;
        _this.getCacheName = {
            cacheName: function (address, nftID) {
                return "NFT-".concat(nftID, "-").concat(address);
            },
            encryptedApp: function (nftID, appID) {
                return "EncryptedApp-".concat(nftID, "-").concat(appID);
            },
            encryptedAppModifier: function (nftID, appID) {
                return "EncryptedAppModifier-".concat(nftID, "-").concat(appID);
            },
            appPayload: function (nftID, appID) {
                return "AppPayload-".concat(nftID, "-").concat(appID);
            },
            appModifier: function (nftID, appID) {
                return "AppModifier-".concat(nftID, "-").concat(appID);
            },
        };
        _this.getDataFromCache = function (cacheName, cacheObjName) { return __awaiter(_this, void 0, void 0, function () {
            var cacheStorage, cachedResponse, cachedData, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        if (typeof caches === "undefined")
                            return [2 /*return*/, {
                                    success: false,
                                    data: Error("Cache is not found"),
                                }];
                        return [4 /*yield*/, caches.open(cacheName)];
                    case 1:
                        cacheStorage = _a.sent();
                        return [4 /*yield*/, cacheStorage.match(cacheObjName)];
                    case 2:
                        cachedResponse = _a.sent();
                        console.log("cachedResponse:", cachedResponse, cacheName, cacheObjName);
                        // If no cache exists
                        if (!cachedResponse || !cachedResponse.ok) {
                            console.log("Fetched failed!");
                            return [2 /*return*/, {
                                    success: false,
                                    data: Error("Failed to fetch data"),
                                }];
                        }
                        return [4 /*yield*/, (cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.json().then(function (item) {
                                return item;
                            }))];
                    case 3:
                        cachedData = _a.sent();
                        return [2 /*return*/, {
                                success: true,
                                data: cachedData,
                            }];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, {
                                success: false,
                                data: Error(err_1.message),
                            }];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return _this;
    }
    STKAppBrowserCache.prototype.setEncryptedApp = function (address, nftID, appID, encryptedApp) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedApp(nftID, appID), encryptedApp)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.setEncryptedAppModifier = function (address, nftID, appID, encAppModifier) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedAppModifier(nftID, appID), encAppModifier)];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.setAppPayload = function (address, nftID, appID, appPayload) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.appPayload(nftID, appID), appPayload)];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.setAppModifier = function (address, nftID, appID, appModifier) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.appModifier(nftID, appID), appModifier)];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.getEncryptedApp = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAppResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataFromCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedApp(nftID, appID))];
                    case 1:
                        cachedAppResp = _a.sent();
                        // if(cachedAppResp.success == true) {
                        //     const savedEncryptedApp = cachedAppResp.data;
                        //     const encryptedApp: EncryptedPayloadWithKeys = {
                        //         creator: undefined,
                        //         reader: undefined,
                        //         capsule: undefined,
                        //         cipherText: undefined,
                        //         ursulaParams: undefined,
                        //         subnetKFragMap: undefined
                        //     }
                        // }
                        return [2 /*return*/, cachedAppResp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.getAppPayload = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAppResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataFromCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.appPayload(nftID, appID))];
                    case 1:
                        cachedAppResp = _a.sent();
                        return [2 /*return*/, cachedAppResp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.getEncryptedAppModifier = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAppResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataFromCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedAppModifier(nftID, appID))];
                    case 1:
                        cachedAppResp = _a.sent();
                        return [2 /*return*/, cachedAppResp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.getAppModifier = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAppResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataFromCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.appModifier(nftID, appID))];
                    case 1:
                        cachedAppResp = _a.sent();
                        return [2 /*return*/, cachedAppResp];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.deleteEncryptedApp = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedApp(nftID, appID), {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.deleteAppPayload = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.appPayload(nftID, appID), {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.deleteEncryptedAppModifier = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache(this.getCacheName.cacheName(address, nftID), this.getCacheName.encryptedAppModifier(nftID, appID), {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.deleteAppModifier = function (address, nftID, appID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDataIntoCache("NFT-".concat(nftID, "-").concat(address), "AppModifier-".concat(nftID, "-").concat(appID), {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    STKAppBrowserCache.prototype.setDataIntoCache = function (cacheName, cacheObjName, obj) {
        return __awaiter(this, void 0, void 0, function () {
            var data, cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = new Response(JSON.stringify(obj));
                        if (!("caches" in window)) return [3 /*break*/, 2];
                        return [4 /*yield*/, caches.open(cacheName)];
                    case 1:
                        cache = _a.sent();
                        cache.put(cacheObjName, data);
                        return [2 /*return*/, {
                                success: true,
                                data: cacheObjName,
                            }];
                    case 2: return [2 /*return*/, {
                            success: false,
                            data: Error("No cache storage available"),
                        }];
                }
            });
        });
    };
    return STKAppBrowserCache;
}(STKAppCache_1.STKAppCache));
exports.default = STKAppBrowserCache;
