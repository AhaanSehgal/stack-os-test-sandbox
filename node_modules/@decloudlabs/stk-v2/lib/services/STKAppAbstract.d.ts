import { APICallReturn, AppModifier, AppPayload, CRUD_APP_STAGE, ContractApp, SubscriptionParam, UrsulaParams } from "../types/types";
import { STKAppCache } from "./STKAppCache";
import { STKAppStorage } from "./STKAppStorage";
export declare abstract class STKAppAbstract {
    protected appCache: STKAppCache;
    protected appStorage: STKAppStorage;
    constructor(appCache: STKAppCache, appStorage: STKAppStorage);
    abstract createApp(contractApp: ContractApp, subscriptionParam: SubscriptionParam, appPayload: AppPayload, appModifier: AppModifier, ursulaParam: UrsulaParams, saveAppToLocal: (app: ContractApp) => void, saveSubParamToLocal: (subParam: SubscriptionParam) => void, setCurrentStatus: (status: typeof CRUD_APP_STAGE.CREATING_APP) => void): APICallReturn<{
        warning: Error[];
    }>;
    abstract updateApp(contractApp: ContractApp, appPayload: AppPayload, appModifier: AppModifier, ursulaParam: UrsulaParams, saveAppToLocal: (app: ContractApp) => void, saveSubParamToLocal: (subParam: SubscriptionParam) => void, setCurrentStatus: (status: typeof CRUD_APP_STAGE.CREATING_APP) => void): APICallReturn<{
        warning: Error[];
    }>;
    abstract deleteApp(nftID: string, appID: string, setCurrentStatus: (status: CRUD_APP_STAGE) => Promise<void>, removeAppFromLocal: (nftID: string, appID: string) => Promise<void>): APICallReturn<{
        warning: Error[];
    }>;
}
