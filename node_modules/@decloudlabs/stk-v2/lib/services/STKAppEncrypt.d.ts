import { UrsulaParams, AppPayload, APICallReturn, UrsulaKFrag, SubnetPKMap, ETHAddress, AppModifier, EncryptedPayloadWithKeys, EncryptedPayload } from "../types/types";
import STKETHKeyEncrypter from "./STKETHKeyEncrypter";
import UmbralService from "./umbralService";
export default class STKAppEncrypt {
    ethKeyEncrypt: STKETHKeyEncrypter;
    umbralService: UmbralService;
    constructor(ethKeyEncrypt: STKETHKeyEncrypter, umbralService: UmbralService);
    encryptPayload(address: ETHAddress, ursulaParams: UrsulaParams, payload: object, subnetPKMap: SubnetPKMap): Promise<APICallReturn<EncryptedPayloadWithKeys>>;
    encryptWithCreatorKey(payload: object, creatorKeys: EncryptedPayloadWithKeys["creator"]): Promise<APICallReturn<EncryptedPayload>>;
    encryptApp(address: ETHAddress, ursulaParams: UrsulaParams, appPayload: AppPayload, appModifier: AppModifier, subnetPKMap: SubnetPKMap): Promise<APICallReturn<{
        appPayload: EncryptedPayloadWithKeys;
        appModifier: EncryptedPayload;
    }>>;
    encryptKfragsUsingUrsula(readerFrags: import("@nucypher/umbral-pre").VerifiedCapsuleFrag[] | undefined, ursulaParams: UrsulaParams): Promise<APICallReturn<UrsulaKFrag[]>>;
}
