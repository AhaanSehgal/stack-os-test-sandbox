/// <reference types="node" />
import { APICallReturn, AppModifier, AppPayload, ContractApp, EncryptedPayload, EncryptedPayloadWithKeys } from "../types/types";
import { STKAppStorage } from "./STKAppStorage";
import IPFSClient from "ipfs-http-client";
import { Buffer } from "buffer";
import { STKAppCache } from "./STKAppCache";
export default class STKAppIPFSStorage extends STKAppStorage {
    sendApp(nftID: string, appID: string, appPayload: AppPayload, cidLock: boolean, appModifier: AppModifier): Promise<APICallReturn<{
        appPath: string;
        modPath: string;
    }>>;
    constructor(appCache: STKAppCache);
    ipfsConfig: ReturnType<typeof IPFSClient.create> | null;
    getIPFSConfig: () => import("ipfs-core-types").IPFS & {
        getEndpointConfig: () => import("ipfs-http-client/dist/src/types").EndpointConfig;
    };
    initIPFS(projectId: string, secret: string): Promise<import("ipfs-core-types").IPFS & {
        getEndpointConfig: () => import("ipfs-http-client/dist/src/types").EndpointConfig;
    }>;
    callIPFSAddAll(pushList: {
        path: string;
        content: Buffer;
    }[]): Promise<APICallReturn<any, Error>>;
    callIPFSCat(path: string): Promise<APICallReturn<any, Error>>;
    getEncryptedApp(contractApp: ContractApp): Promise<APICallReturn<EncryptedPayloadWithKeys>>;
    getEncryptedAppModifier(contractApp: ContractApp): Promise<APICallReturn<EncryptedPayload>>;
    sendEncryptedApp(appName: string, nftID: string, appID: string, encryptedApp: EncryptedPayloadWithKeys, appModifier: EncryptedPayload | null, cidLock: boolean): Promise<APICallReturn<{
        appPath: string;
        modPath: string;
    }>>;
    sendAppToStorage(nftID: string, appID: string, appPayload: AppPayload, cidLock: boolean, appModifier: AppModifier): Promise<APICallReturn<{
        appPath: string;
        modPath: string;
    }>>;
    createIPFSDir: (CID: string | undefined, nftID: string, appName: string, path?: string) => string;
    readFile(path: string): Promise<any>;
    readFileWithInfura(path: string): Promise<any>;
    readFileFromPublicGateway(path: string): Promise<any>;
    removeApp(appPath: string): Promise<APICallReturn<string>>;
    getStorageIDForContract(): number;
}
