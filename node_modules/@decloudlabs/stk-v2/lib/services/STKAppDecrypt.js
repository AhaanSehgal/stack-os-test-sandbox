"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("../utils/utils");
var uuid_1 = require("uuid");
var STKAppDecrypt = /** @class */ (function () {
    function STKAppDecrypt(ethKeyEncrypt, umbralService) {
        this.dec = new TextDecoder("utf-8");
        this.typedMessage = function (timestamp, chainId) {
            return {
                types: {
                    EIP712Domain: [
                        {
                            name: "name",
                            type: "string",
                        },
                        {
                            name: "version",
                            type: "string",
                        },
                        {
                            name: "chainId",
                            type: "uint256",
                        },
                    ],
                    Auth: [
                        {
                            name: "nonce",
                            type: "string",
                        },
                        {
                            name: "timestamp",
                            type: "uint256",
                        },
                    ],
                },
                domain: {
                    name: "Stackos-dapp",
                    version: "2",
                    chainId: chainId,
                },
                primaryType: "Auth",
                message: {
                    nonce: (0, uuid_1.v4)(),
                    timestamp: timestamp,
                },
            };
        };
        // super();
        this.ethKeyEncrypt = ethKeyEncrypt;
        this.umbralService = umbralService;
    }
    STKAppDecrypt.prototype.decryptByCreatorKeys = function (encryptPayload, creatorSK) {
        return __awaiter(this, void 0, void 0, function () {
            var capsule, cipherText, array, numberArray, secretKey, payload;
            return __generator(this, function (_a) {
                capsule = this.umbralService.convertToUmbralCapsule(encryptPayload.capsule);
                cipherText = this.umbralService.convertToUmbralCipher(encryptPayload.cipherText);
                array = creatorSK.split(",");
                numberArray = array.map(function (value) { return Number(value); });
                secretKey = this.umbralService.convertToUmbralSecretKey(numberArray);
                payload = JSON.parse(this.dec.decode(this.umbralService
                    .getUmbral()
                    .decryptOriginal(secretKey, capsule, cipherText)));
                return [2 /*return*/, {
                        success: true,
                        data: payload,
                    }];
            });
        });
    };
    STKAppDecrypt.prototype.decryptReencrypted = function (encryptedPayload, callerSK, cfragList) {
        return __awaiter(this, void 0, void 0, function () {
            var capsule, cipherText, publicKey, secretKey, payload;
            return __generator(this, function (_a) {
                capsule = this.umbralService.convertToUmbralCapsule(encryptedPayload.capsule);
                cipherText = encryptedPayload.cipherText;
                publicKey = this.umbralService.convertToUmbralPublicKey(encryptedPayload.creator.publicKey);
                secretKey = this.umbralService.convertToUmbralSecretKey(callerSK);
                payload = JSON.parse(this.dec.decode(this.umbralService
                    .getUmbral()
                    .decryptReencrypted(secretKey, publicKey, capsule, cfragList, new Uint8Array(cipherText))));
                return [2 /*return*/, {
                        success: true,
                        data: payload,
                    }];
            });
        });
    };
    STKAppDecrypt.prototype.decryptPayload = function (nftID, appID, encryptedPayload, callerRole, ursulaAuth) {
        return __awaiter(this, void 0, void 0, function () {
            var creatorSkResp, decryptResp, cfragList, secretKey, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(callerRole.roleType === "OWNER" &&
                            callerRole.callerAddress.toLowerCase() ===
                                encryptedPayload.creator.creatorAddress.toLowerCase())) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.ethKeyEncrypt.decrypt(new Uint8Array(encryptedPayload.creator.secretKey))];
                    case 1:
                        creatorSkResp = _a.sent();
                        if (creatorSkResp.success == false) {
                            return [2 /*return*/, creatorSkResp];
                        }
                        return [4 /*yield*/, this.decryptByCreatorKeys(encryptedPayload, creatorSkResp.data)];
                    case 2:
                        decryptResp = _a.sent();
                        if (decryptResp.success)
                            return [2 /*return*/, decryptResp];
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.getCFragList(nftID, appID, encryptedPayload, ursulaAuth, callerRole, 1)];
                    case 4:
                        cfragList = _a.sent();
                        if (cfragList.success == false) {
                            return [2 /*return*/, cfragList];
                        }
                        console.log("cfragList: ", cfragList);
                        secretKey = callerRole.roleType === "CLUSTER"
                            ? callerRole.secretKey
                            : encryptedPayload.reader.secretKey;
                        return [4 /*yield*/, this.decryptReencrypted(encryptedPayload, secretKey, cfragList.data)];
                    case 5:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    STKAppDecrypt.prototype.decryptApp = function (nftID, appID, encryptedApp, encryptedAppModifier, callerRole, ursulaAuth) {
        return __awaiter(this, void 0, void 0, function () {
            var creatorSkResp, decryptResp, decryptModResp, appCFragResp, secretKey, appPayloadResp, appModifier, modCFragResp, appModResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(callerRole.roleType === "OWNER" &&
                            callerRole.callerAddress.toLowerCase() ===
                                encryptedApp.creator.creatorAddress.toLowerCase())) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.ethKeyEncrypt.decrypt(new Uint8Array(encryptedApp.creator.secretKey))];
                    case 1:
                        creatorSkResp = _a.sent();
                        if (creatorSkResp.success == false) {
                            return [2 /*return*/, creatorSkResp];
                        }
                        return [4 /*yield*/, this.decryptByCreatorKeys(encryptedApp, creatorSkResp.data)];
                    case 2:
                        decryptResp = _a.sent();
                        if (!(decryptResp.success == true)) return [3 /*break*/, 4];
                        if (!encryptedAppModifier)
                            return [2 /*return*/, {
                                    success: true,
                                    data: {
                                        appPayload: decryptResp.data,
                                    },
                                }];
                        return [4 /*yield*/, this.decryptByCreatorKeys(__assign(__assign({}, encryptedApp), encryptedAppModifier), creatorSkResp.data)];
                    case 3:
                        decryptModResp = _a.sent();
                        if (decryptModResp.success == true) {
                            return [2 /*return*/, {
                                    success: true,
                                    data: {
                                        appPayload: decryptResp.data,
                                        appModifier: decryptModResp.data,
                                    },
                                }];
                        }
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.getCFragList(nftID, appID, encryptedApp, ursulaAuth, callerRole, 1)];
                    case 5:
                        appCFragResp = _a.sent();
                        if (appCFragResp.success == false) {
                            return [2 /*return*/, appCFragResp];
                        }
                        secretKey = callerRole.roleType === "CLUSTER"
                            ? callerRole.secretKey
                            : encryptedApp.reader.secretKey;
                        return [4 /*yield*/, this.decryptReencrypted(encryptedApp, secretKey, appCFragResp.data)];
                    case 6:
                        appPayloadResp = _a.sent();
                        if (appPayloadResp.success == false)
                            return [2 /*return*/, appPayloadResp];
                        appModifier = undefined;
                        if (!encryptedAppModifier) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.getCFragList(nftID, appID, __assign(__assign({}, encryptedApp), encryptedAppModifier), ursulaAuth, callerRole, 1)];
                    case 7:
                        modCFragResp = _a.sent();
                        if (modCFragResp.success == false) {
                            return [2 /*return*/, modCFragResp];
                        }
                        return [4 /*yield*/, this.decryptReencrypted(__assign(__assign({}, encryptedApp), encryptedAppModifier), secretKey, modCFragResp.data)];
                    case 8:
                        appModResp = _a.sent();
                        if (appModResp.success == false)
                            return [2 /*return*/, appModResp];
                        appModifier = appModResp.data;
                        _a.label = 9;
                    case 9: return [2 /*return*/, {
                            success: true,
                            data: {
                                appPayload: appPayloadResp.data,
                                appModifier: appModifier,
                            },
                        }];
                }
            });
        });
    };
    STKAppDecrypt.prototype.signUserForDecryption = function (provider, address) {
        return __awaiter(this, void 0, void 0, function () {
            var chainId, newTypedMessage, signatureResp, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, provider.getNetwork()];
                    case 1:
                        chainId = (_a.sent()).chainId;
                        newTypedMessage = this.typedMessage(Date.now(), Number(chainId));
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.ethKeyEncrypt.sign(newTypedMessage)];
                    case 3:
                        signatureResp = _a.sent();
                        if (signatureResp.success == false)
                            return [2 /*return*/, signatureResp];
                        return [2 /*return*/, {
                                success: true,
                                data: {
                                    userAddress: address,
                                    signature: signatureResp.data.signature,
                                    message: newTypedMessage,
                                },
                            }];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, {
                                success: false,
                                data: err_1,
                            }];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    STKAppDecrypt.prototype.getCFragList = function (nftID, appID, encryptedApp, ursulaAuth, callerRole, maxTryCount) {
        return __awaiter(this, void 0, void 0, function () {
            var responseMap, responseSuccessCount, tryCount, KFragList, curResponse, cfragList, resultMap, i, ursulaResp, cfrag, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        responseMap = {};
                        responseSuccessCount = 0;
                        tryCount = 0;
                        KFragList = callerRole.roleType === "CLUSTER"
                            ? encryptedApp.subnetKFragMap[callerRole.subnetID]
                            : encryptedApp.reader.kFragList;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.callUrsulas(nftID, appID, encryptedApp.ursulaParams, callerRole, ursulaAuth, encryptedApp.capsule, KFragList, responseMap)];
                    case 3:
                        curResponse = _a.sent();
                        responseMap = __assign(__assign({}, responseMap), curResponse.data);
                        responseSuccessCount += curResponse.successCount;
                        if (responseSuccessCount >= maxTryCount) {
                            return [3 /*break*/, 4];
                        }
                        tryCount += 1;
                        if (tryCount == maxTryCount) {
                            return [2 /*return*/, {
                                    success: false,
                                    data: {
                                        ursulaError: curResponse,
                                    },
                                }];
                        }
                        return [3 /*break*/, 2];
                    case 4:
                        cfragList = [];
                        responseSuccessCount = 0;
                        resultMap = {};
                        for (i = 0; i < encryptedApp.ursulaParams.ursulaURLList.length; i++) {
                            ursulaResp = responseMap[i];
                            try {
                                if (ursulaResp && ursulaResp.success) {
                                    cfrag = this.umbralService.convertToUmbralCFrag(Object.values(ursulaResp.data));
                                    cfragList.push(cfrag);
                                    resultMap[i] = {
                                        success: true,
                                        data: ursulaResp.data,
                                    };
                                    responseSuccessCount += 1;
                                }
                            }
                            catch (err) {
                                resultMap[i] = {
                                    success: false,
                                    data: err,
                                };
                            }
                        }
                        if (responseSuccessCount >= maxTryCount) {
                            return [2 /*return*/, {
                                    success: true,
                                    data: cfragList,
                                }];
                        }
                        else {
                            return [2 /*return*/, {
                                    success: false,
                                    data: {
                                        ursulaError: resultMap,
                                    },
                                }];
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        return [2 /*return*/, {
                                success: false,
                                data: {
                                    error: error_1,
                                    ursulaError: {},
                                },
                            }];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    STKAppDecrypt.prototype.getCFragListBatch = function (nftID, appID, callerRole, encryptedDataBatch, ursulaAuth, ursulaParams) {
        return __awaiter(this, void 0, void 0, function () {
            var creatorBatch, readerBatch, capsuleBatch, cipherTextBatch, capsuleBytesBatch, secretKeyBatch, publicKeyBatch, kfrags, i, _a, creator, reader, capsuleBytes, cipherTextBytes, cipherText, creatorPublicKey, readerPublicKey, kfragBatch, i, tempArray, j, ursulaCallPromises, i, url, subnetID, clusterID, clusterWalletAddress, ursulaCallPromise, ursulaCallResults, responses, cfrags, err_2, error;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        _b.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        creatorBatch = [];
                        readerBatch = [];
                        capsuleBatch = [];
                        cipherTextBatch = [];
                        capsuleBytesBatch = [];
                        secretKeyBatch = [];
                        publicKeyBatch = [];
                        kfrags = [];
                        for (i = 0; i < encryptedDataBatch.length; i++) {
                            _a = encryptedDataBatch[i], creator = _a.creator, reader = _a.reader, capsuleBytes = _a.capsule, cipherTextBytes = _a.cipherText;
                            cipherText = this.umbralService.convertToUmbralCipher(cipherTextBytes);
                            creatorPublicKey = this.umbralService.convertToUmbralPublicKey(creator.publicKey);
                            readerPublicKey = this.umbralService.convertToUmbralSecretKey(reader.secretKey);
                            // const capsule = this.umbralService.convertToUmbralCapsule(capsuleBytes);
                            creatorBatch.push(creator);
                            readerBatch.push(reader);
                            capsuleBatch.push();
                            cipherTextBatch.push(cipherText);
                            capsuleBytesBatch.push(new Uint8Array(capsuleBytes));
                            kfrags.push(reader.kFragList);
                            secretKeyBatch.push(readerPublicKey);
                            publicKeyBatch.push(creatorPublicKey);
                        }
                        kfragBatch = [];
                        for (i = 0; i < kfrags[0].length; i++) {
                            tempArray = [];
                            for (j = 0; j < kfrags.length; j++) {
                                tempArray.push(Buffer.from(kfrags[j][i].kfrag).toString("hex"));
                            }
                            kfragBatch.push(tempArray);
                        }
                        ursulaCallPromises = [];
                        for (i = 0; i < ursulaParams.ursulaURLList.length; i++) {
                            url = "";
                            if (callerRole.roleType === "CLUSTER") {
                                subnetID = callerRole.subnetID;
                                clusterID = callerRole.clusterID;
                                clusterWalletAddress = callerRole.clusterAddress;
                                url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaClusterAPI, "/batch/").concat(subnetID, "/").concat(clusterID, "/").concat(nftID, "/").concat(appID[i], "/").concat(clusterWalletAddress);
                            }
                            else if (callerRole.roleType === "OWNER") {
                                url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaNFTOwnerAPI, "/batch/").concat(nftID);
                            }
                            else {
                                url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaRoleAPI, "/btach/").concat(nftID);
                            }
                            ursulaCallPromise = (0, utils_1.apiCallWrapper)(axios_1.default.post(url, {
                                userAuthPayload: ursulaAuth,
                                capsules: capsuleBytesBatch,
                                kfrags: kfragBatch[i],
                            }), function (res) { return (res.data.success ? res.data.data : null); });
                            ursulaCallPromises.push(ursulaCallPromise);
                        }
                        return [4 /*yield*/, Promise.all(ursulaCallPromises)];
                    case 2:
                        ursulaCallResults = _b.sent();
                        responses = ursulaCallResults;
                        cfrags = responses
                            .map(function (res) {
                            var _a;
                            if (res.success) {
                                return (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.map(function (cfrag) {
                                    return _this.umbralService.convertToUmbralCFrag(Object.values(cfrag));
                                });
                            }
                        })
                            .filter(function (item) { return item !== undefined; });
                        if (cfrags.length < ursulaParams.kfragThreshold) {
                            return [2 /*return*/, {
                                    success: false,
                                    data: {
                                        ursulaError: ursulaCallResults,
                                    },
                                }];
                        }
                        return [2 /*return*/, { success: true, data: cfrags }];
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        err_2 = _b.sent();
                        error = err_2;
                        return [2 /*return*/, { success: false, data: { error: error, ursulaError: [] } }];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    STKAppDecrypt.prototype.callUrsulas = function (nftID, appID, ursulaParams, callerRole, ursulaAuth, capsuleBytes, kFragList, prevCallStatus) {
        return __awaiter(this, void 0, void 0, function () {
            var ursulaCallList, resultMap, tryCount, successCount, ursulaCallIDList, i, url, subnetID, clusterID, clusterWalletAddress, ursulaCallPromise, promiseRaceCompleted, resp;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ursulaCallList = [];
                        resultMap = {};
                        tryCount = 0;
                        successCount = 0;
                        ursulaCallIDList = [];
                        for (i = 0; i < ursulaParams.ursulaURLList.length; i++) {
                            if (!prevCallStatus[i] || !prevCallStatus[i].success) {
                                url = "";
                                if (callerRole.roleType === "CLUSTER") {
                                    subnetID = callerRole.subnetID;
                                    clusterID = callerRole.clusterID;
                                    clusterWalletAddress = callerRole.clusterAddress;
                                    url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaClusterAPI, "/").concat(subnetID, "/").concat(clusterID, "/").concat(nftID, "/").concat(appID, "/").concat(clusterWalletAddress);
                                }
                                else if (callerRole.roleType === "OWNER" ||
                                    callerRole.roleType === "OWNER_URSULA") {
                                    url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaNFTOwnerAPI, "/").concat(nftID);
                                }
                                else {
                                    url = "".concat(ursulaParams.ursulaURLList[i], "/").concat(ursulaParams.ursulaRoleAPI, "/").concat(nftID);
                                }
                                ursulaCallPromise = (0, utils_1.apiCallWrapper)(axios_1.default.post(url, {
                                    userAuthPayload: ursulaAuth,
                                    capsule: capsuleBytes,
                                    kfrag: Buffer.from(kFragList[i].kfrag).toString("hex"),
                                }), function (res) { return (res.data.success ? res.data.data : null); });
                                ursulaCallList.push(ursulaCallPromise);
                                ursulaCallIDList.push(i);
                            }
                        }
                        promiseRaceCompleted = false;
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var i = 0;
                                var _loop_1 = function (p) {
                                    var ursulaID = ursulaCallIDList[i];
                                    i += 1;
                                    (function (callID) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Promise.resolve(p).then(function (result) {
                                                if (promiseRaceCompleted)
                                                    return;
                                                resultMap[callID] = __assign({}, result);
                                                tryCount += 1;
                                                if (result.success) {
                                                    if (successCount < ursulaParams.kfragThreshold) {
                                                        successCount += 1;
                                                    }
                                                    if (successCount === ursulaParams.kfragThreshold) {
                                                        promiseRaceCompleted = true;
                                                        resolve({
                                                            successCount: successCount,
                                                            data: resultMap,
                                                        });
                                                    }
                                                }
                                                if (tryCount == ursulaCallList.length) {
                                                    promiseRaceCompleted = true;
                                                    resolve({
                                                        successCount: successCount,
                                                        data: resultMap,
                                                    });
                                                }
                                            }, function (err) {
                                                resultMap[callID] = {
                                                    success: false,
                                                    data: err,
                                                };
                                                tryCount += 1;
                                                if (tryCount == ursulaCallList.length) {
                                                    promiseRaceCompleted = true;
                                                    resolve({
                                                        successCount: successCount,
                                                        data: resultMap,
                                                    });
                                                }
                                            });
                                            return [2 /*return*/];
                                        });
                                    }); })(ursulaID);
                                };
                                for (var _i = 0, ursulaCallList_1 = ursulaCallList; _i < ursulaCallList_1.length; _i++) {
                                    var p = ursulaCallList_1[_i];
                                    _loop_1(p);
                                }
                            })];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp];
                }
            });
        });
    };
    return STKAppDecrypt;
}());
exports.default = STKAppDecrypt;
