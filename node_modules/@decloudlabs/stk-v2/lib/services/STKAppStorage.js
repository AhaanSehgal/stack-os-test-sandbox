"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STKAppStorage = void 0;
var STKAppStorage = /** @class */ (function () {
    function STKAppStorage(appCache) {
        this.appCache = appCache;
    }
    STKAppStorage.prototype.setEncryptedAppToCache = function (address, appList) {
        return __awaiter(this, void 0, void 0, function () {
            var encryptedAppMap, appToFetchList, warnings, i, contractApp, resp, cachedEncryptedApp, _i, appToFetchList_1, index, contractApp, resp, err_1, err_2, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encryptedAppMap = {};
                        appToFetchList = [];
                        warnings = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 15, , 16]);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < appList.length)) return [3 /*break*/, 5];
                        contractApp = appList[i];
                        return [4 /*yield*/, this.appCache.getEncryptedApp(address, contractApp.nftID, contractApp.appID)];
                    case 3:
                        resp = _a.sent();
                        if (resp.success) {
                            cachedEncryptedApp = resp.data;
                            if (cachedEncryptedApp.appPath === contractApp.appPath) {
                                encryptedAppMap[contractApp.appID] =
                                    cachedEncryptedApp.encryptedApp;
                            }
                            else {
                                appToFetchList.push(i);
                            }
                        }
                        else {
                            appToFetchList.push(i);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        _i = 0, appToFetchList_1 = appToFetchList;
                        _a.label = 6;
                    case 6:
                        if (!(_i < appToFetchList_1.length)) return [3 /*break*/, 14];
                        index = appToFetchList_1[_i];
                        contractApp = appList[appToFetchList[index]];
                        return [4 /*yield*/, this.getEncryptedApp(contractApp)];
                    case 7:
                        resp = _a.sent();
                        if (!(resp.success == true)) return [3 /*break*/, 12];
                        encryptedAppMap[contractApp.appID] = resp.data;
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.appCache.setEncryptedApp(address, contractApp.nftID, contractApp.appID, {
                                appPath: contractApp.appPath,
                                encryptedApp: resp.data,
                            })];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        err_1 = _a.sent();
                        warnings.push(err_1);
                        return [3 /*break*/, 11];
                    case 11: return [3 /*break*/, 13];
                    case 12: return [2 /*return*/, { success: false, data: resp.data }];
                    case 13:
                        _i++;
                        return [3 /*break*/, 6];
                    case 14: return [2 /*return*/, {
                            success: true,
                            data: {
                                encryptedAppList: Object.values(encryptedAppMap),
                                warning: warnings,
                            },
                        }];
                    case 15:
                        err_2 = _a.sent();
                        error = err_2;
                        return [2 /*return*/, {
                                success: false,
                                data: error,
                            }];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    STKAppStorage.prototype.setEncryptedAppModifierToCache = function (address, appList) {
        return __awaiter(this, void 0, void 0, function () {
            var encryptedAppModMap, appToFetchList, warnings, i, contractApp, resp, cachedEncryptedApp, _i, appToFetchList_2, index, contractApp, resp, err_3, err_4, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encryptedAppModMap = {};
                        appToFetchList = [];
                        warnings = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 15, , 16]);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < appList.length)) return [3 /*break*/, 5];
                        contractApp = appList[i];
                        return [4 /*yield*/, this.appCache.getEncryptedAppModifier(address, contractApp.nftID, contractApp.appID)];
                    case 3:
                        resp = _a.sent();
                        if (resp.success) {
                            cachedEncryptedApp = resp.data;
                            if (cachedEncryptedApp.appPath === contractApp.appPath) {
                                encryptedAppModMap[contractApp.appID] =
                                    cachedEncryptedApp.encryptedAppModifier;
                            }
                            else {
                                appToFetchList.push(i);
                            }
                        }
                        else {
                            appToFetchList.push(i);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        _i = 0, appToFetchList_2 = appToFetchList;
                        _a.label = 6;
                    case 6:
                        if (!(_i < appToFetchList_2.length)) return [3 /*break*/, 14];
                        index = appToFetchList_2[_i];
                        contractApp = appList[appToFetchList[index]];
                        return [4 /*yield*/, this.getEncryptedAppModifier(contractApp)];
                    case 7:
                        resp = _a.sent();
                        if (!(resp.success == true)) return [3 /*break*/, 12];
                        encryptedAppModMap[contractApp.appID] = resp.data;
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.appCache.setEncryptedAppModifier(address, contractApp.nftID, contractApp.appID, {
                                appPath: contractApp.appPath,
                                encryptedAppModifier: resp.data,
                            })];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        err_3 = _a.sent();
                        warnings.push(err_3);
                        return [3 /*break*/, 11];
                    case 11: return [3 /*break*/, 13];
                    case 12: return [2 /*return*/, { success: false, data: resp.data }];
                    case 13:
                        _i++;
                        return [3 /*break*/, 6];
                    case 14: return [2 /*return*/, {
                            success: true,
                            data: {
                                encryptedAppModifierList: Object.values(encryptedAppModMap),
                                warning: warnings,
                            },
                        }];
                    case 15:
                        err_4 = _a.sent();
                        error = err_4;
                        return [2 /*return*/, {
                                success: false,
                                data: error,
                            }];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return STKAppStorage;
}());
exports.STKAppStorage = STKAppStorage;
