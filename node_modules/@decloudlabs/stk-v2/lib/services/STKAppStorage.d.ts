import { APICallReturn, AppModifier, AppPayload, ContractApp, ETHAddress, EncryptedPayload, EncryptedPayloadWithKeys } from "../types/types";
import { STKAppCache } from "./STKAppCache";
export declare abstract class STKAppStorage {
    appCache: STKAppCache;
    constructor(appCache: STKAppCache);
    abstract getEncryptedApp(contractApp: ContractApp): Promise<APICallReturn<EncryptedPayloadWithKeys>>;
    abstract getEncryptedAppModifier(contractApp: ContractApp): Promise<APICallReturn<EncryptedPayload>>;
    setEncryptedAppToCache(address: ETHAddress, appList: ContractApp[]): Promise<APICallReturn<{
        encryptedAppList: EncryptedPayloadWithKeys[];
        warning?: Error[];
    }>>;
    setEncryptedAppModifierToCache(address: ETHAddress, appList: ContractApp[]): Promise<APICallReturn<{
        encryptedAppModifierList: EncryptedPayload[];
        warning?: Error[];
    }>>;
    abstract sendEncryptedApp(appName: string, nftID: string, appID: string, encryptedApp: EncryptedPayloadWithKeys, appModifier: EncryptedPayload | null, cidLock: boolean): Promise<APICallReturn<{
        appPath: string;
        modPath: string;
    }>>;
    abstract sendApp(nftID: string, appID: string, appPayload: AppPayload, cidLock: boolean, appModifier: AppModifier): Promise<APICallReturn<{
        appPath: string;
        modPath: string;
    }>>;
    abstract removeApp(appPath: string): Promise<APICallReturn<string>>;
    abstract getStorageIDForContract(): number;
}
