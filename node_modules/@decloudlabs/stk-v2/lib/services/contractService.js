"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
var AppNFT_1 = __importDefault(require("../ABI/AppNFT"));
var AppNFTMinter_1 = __importDefault(require("../ABI/AppNFTMinter"));
var AppDeployment_1 = __importDefault(require("../ABI/AppDeployment"));
var DarkMatterNFT_1 = __importDefault(require("../ABI/DarkMatterNFT"));
var SubnetCluster_1 = __importDefault(require("../ABI/SubnetCluster"));
var Stack_1 = __importDefault(require("../ABI/Stack"));
var Subscription_1 = __importDefault(require("../ABI/Subscription"));
var XCT_1 = __importDefault(require("../ABI/XCT"));
var SubscriptionBalance_1 = __importDefault(require("../ABI/SubscriptionBalance"));
var SubnetDAODistributor_1 = __importDefault(require("../ABI/SubnetDAODistributor"));
var SubscriptionBalanceCalculator_1 = __importDefault(require("../ABI/SubscriptionBalanceCalculator"));
var XCTMinter_1 = __importDefault(require("../ABI/XCTMinter"));
var ethers_1 = require("ethers");
var selectedAccount, defaultOptions, contractAddresses, DarkMatterNFT, Stack, SubnetCluster, Subscription, XCT, AppNFT, AppNFTMinter, AppDeployment, SubscriptionBalance, SubnetDAODistributor, SubscriptionBalanceCalculator, XCTMinter;
var init = function (provider, signer, addresses, walletAddress) {
    try {
        selectedAccount = walletAddress;
        defaultOptions = { from: selectedAccount };
        contractAddresses = addresses;
        DarkMatterNFT = new ethers_1.ethers.Contract(contractAddresses.darkMatterNFT, DarkMatterNFT_1.default, signer);
        Stack = new ethers_1.ethers.Contract(contractAddresses.stack, Stack_1.default, signer);
        SubnetCluster = new ethers_1.ethers.Contract(contractAddresses.Registration, SubnetCluster_1.default, signer);
        Subscription = new ethers_1.ethers.Contract(contractAddresses.Subscription, Subscription_1.default, signer);
        XCT = new ethers_1.ethers.Contract(contractAddresses.xct, XCT_1.default, signer);
        AppNFT = new ethers_1.ethers.Contract(contractAddresses.appNFT, AppNFT_1.default, signer);
        AppNFTMinter = new ethers_1.ethers.Contract(contractAddresses.appNFTMinter, AppNFTMinter_1.default, signer);
        AppDeployment = new ethers_1.ethers.Contract(contractAddresses.AppDeployment, AppDeployment_1.default, // TODO : change to appDeploymentABI
        signer);
        SubscriptionBalance = new ethers_1.ethers.Contract(contractAddresses.SubscriptionBalance, SubscriptionBalance_1.default, signer);
        SubnetDAODistributor = new ethers_1.ethers.Contract(contractAddresses.SubnetDAODistributor, SubnetDAODistributor_1.default, signer);
        SubscriptionBalanceCalculator = new ethers_1.ethers.Contract(contractAddresses.SubscriptionBalanceCalculator, SubscriptionBalanceCalculator_1.default, signer);
        XCTMinter = new ethers_1.ethers.Contract(contractAddresses.xctMinter, XCTMinter_1.default, signer);
        return {
            selectedAccount: selectedAccount,
            DarkMatterNFT: DarkMatterNFT,
            Stack: Stack,
            SubnetCluster: SubnetCluster,
            Subscription: Subscription,
            XCT: XCT,
            AppNFT: AppNFT,
            AppNFTMinter: AppNFTMinter,
            AppDeployment: AppDeployment,
            SubscriptionBalance: SubscriptionBalance,
            SubnetDAODistributor: SubnetDAODistributor,
            SubscriptionBalanceCalculator: SubscriptionBalanceCalculator,
            XCTMinter: XCTMinter,
            Provider: provider,
        };
    }
    catch (error) {
        return error;
    }
};
exports.init = init;
