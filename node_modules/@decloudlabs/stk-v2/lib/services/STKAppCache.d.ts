import { APICallReturn, CachedAppModifier, CachedAppPayload, CachedEncryptedApp, CachedEncryptedAppModifier, ETHAddress } from "../types/types";
export declare abstract class STKAppCache {
    abstract setEncryptedApp(address: ETHAddress, nftID: string, appID: string, encryptedApp: CachedEncryptedApp): Promise<APICallReturn<string>>;
    abstract setEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string, encAppModifier: CachedEncryptedAppModifier): Promise<APICallReturn<string>>;
    abstract setAppPayload(address: ETHAddress, nftID: string, appID: string, appPayload: CachedAppPayload): Promise<APICallReturn<string>>;
    abstract setAppModifier(address: ETHAddress, nftID: string, appID: string, appModifier: CachedAppModifier): Promise<APICallReturn<string>>;
    abstract getEncryptedApp(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedEncryptedApp>>;
    abstract getAppPayload(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedAppPayload>>;
    abstract getEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedEncryptedAppModifier>>;
    abstract getAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<CachedAppModifier>>;
    abstract deleteEncryptedApp(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    abstract deleteAppPayload(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    abstract deleteEncryptedAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
    abstract deleteAppModifier(address: ETHAddress, nftID: string, appID: string): Promise<APICallReturn<string>>;
}
