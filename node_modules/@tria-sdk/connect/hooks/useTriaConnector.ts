import { useState, useEffect } from 'react';
import { TRIA_WALLET_SELECTED_CHAIN, TRIA_WALLET_STORE, eventTypes } from '../utils/constants';

/**
 *
 * @param event event
 * @param type event type waiting for - like "Login, Signup, Sign"
 * @returns Json parsed data - message from the event
 */
export const parseEventData = (event: any /*type: string*/) => {
  let data;
  try {
    data = JSON.parse(event.data);
  } catch (err) {
    data = event.data;
  }
  return data;
};

export function useTriaConnector({
  authUrl = 'https://auth.tria.so',
  walletUrl = 'https://wallet.tria.so',
}: {
  authUrl: string;
  walletUrl: string;
}) {
  const iglobalData = new Map();
  const [globalData, setGlobalData] = useState(iglobalData);

  const setTriaStore = (eventData: any) => {
    if (eventData?.success) {
      console.log('setTriaStore');
      console.log(`Save ${eventData} to local storage`);
      window.localStorage.setItem(TRIA_WALLET_STORE, JSON.stringify(eventData?.data));
    } else {
      console.log('Sign up or Login failed!!');
    }
  };

  const disconnect = (eventData: any) => {
    if (eventData?.success) window.localStorage.removeItem(TRIA_WALLET_STORE);
  };

  const setSelectedChain = (data: any) => {
    window.localStorage.setItem(TRIA_WALLET_SELECTED_CHAIN, data?.data?.chainName);
  };

  const isSignUpEvent = (eventType: string) => {
    return eventType.includes('Sign up') || eventType == 'Log in';
  };

  // For react
  useEffect(() => {
    const authResponse = (event: any) => {
      // console.log('event.origin', event.origin);
      // console.log('walletUrl', walletUrl);
      // console.log('authUrl', authUrl);

      if (!(event.origin == walletUrl || event.origin == authUrl)) return;

      const eventData = parseEventData(event /*eventType*/);
      const eventType = eventData?.type;
      if (!eventType) return;
      console.log(event.data);
      if (isSignUpEvent(eventType)) {
        console.log('is a sign up or login event');
        setTriaStore(eventData);
      } else if (eventType == eventTypes.switchChain) {
        setSelectedChain(eventData);
      } else if (eventType == eventTypes.disconnect || eventType == eventTypes.logout) {
        disconnect(eventData);
      }

      const tempMap = new Map();
      tempMap.set(`${eventType}`, eventData);
      console.log({ tempMap });
      const newMap = new Map([...globalData, ...tempMap]);
      setGlobalData(newMap);
    };
    window.addEventListener('message', authResponse);
    return () => window.removeEventListener('message', authResponse);
  }, []);

  return {
    globalData,
  };
}
