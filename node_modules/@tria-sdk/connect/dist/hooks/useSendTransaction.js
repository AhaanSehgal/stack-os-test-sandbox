"use strict";
// useSignMessage.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransaction = void 0;
const react_1 = require("react");
// import { eventTypes } from '../utils/constants';
const authUrl = 'https://auth-tria.vercel.app';
const helper_1 = require("../utils/helper");
const useSendTransaction = (calldata) => {
    const [data, setData] = (0, react_1.useState)('');
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [isError, setIsError] = (0, react_1.useState)(false);
    const sendTransaction = () => {
        setIsLoading(true);
        const iframeEncodedData = (0, helper_1.createEncodedData)(calldata);
        const signIframeUrl = `${authUrl}/send/${iframeEncodedData}`;
        const iframe = (0, helper_1.createIframe)(signIframeUrl, 'sdkSend');
        setIsLoading(false);
        return signIframeUrl;
    };
    (0, react_1.useEffect)(() => {
        const detect = (event) => {
            var _a;
            if (event.origin !== authUrl)
                return;
            let eventData;
            try {
                eventData = JSON.parse(event.data);
            }
            catch (err) {
                eventData = event.data;
            }
            if ((eventData === null || eventData === void 0 ? void 0 : eventData.type) === 'closeIframe' && (eventData === null || eventData === void 0 ? void 0 : eventData.callFrom) == 'send') {
                setData(eventData === null || eventData === void 0 ? void 0 : eventData.data);
                setIsLoading(false);
                (_a = document.getElementById('sdkSend')) === null || _a === void 0 ? void 0 : _a.remove();
            }
        };
        window.addEventListener('message', detect);
        return () => {
            window.removeEventListener('message', detect);
        };
    }, []);
    return { data, isLoading, isError, isSuccess: !!data, sendTransaction };
};
exports.useSendTransaction = useSendTransaction;
