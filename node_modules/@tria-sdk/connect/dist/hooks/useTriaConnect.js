// @ts-ignore
import { useState, useEffect } from 'react';
import { IframeController } from '../controllers/iframe.controller';
import { TRIA_WALLET_STORE } from '../utils/constants';
import { useAccount } from './useAccount';
// useListener
export function useTriaConnect({ walletUrl, eventType }) {
    // Event types
    // Data struture for data across event types
    const { setAccount } = useAccount();
    const iglobalData = new Map();
    const [globalData, setGlobalData] = useState(iglobalData);
    // For react
    useEffect(() => {
        const iframeController = new IframeController({
            walletUrl,
            parentUrl: window.location.origin, // get your own base url
        });
        const authResponse = (event) => {
            if (event.origin !== walletUrl)
                return;
            console.log({ eventType });
            const data = iframeController === null || iframeController === void 0 ? void 0 : iframeController.handleMessageFromIframe(event, eventType);
            if (data) {
                if (eventType.includes('Sign up') || eventType == 'Log in') {
                    console.log(`Save ${data} to local storage`);
                    if (data === null || data === void 0 ? void 0 : data.success) {
                        window.localStorage.setItem(TRIA_WALLET_STORE, JSON.stringify(data === null || data === void 0 ? void 0 : data.data));
                        setAccount(data === null || data === void 0 ? void 0 : data.data);
                    }
                }
                const tempMap = new Map();
                tempMap.set(`${eventType}`, data);
                console.log({ tempMap });
                const newMap = new Map([...globalData, ...tempMap]);
                setGlobalData(newMap);
                // if (data?.type === 'Sign Message') signWindow?.close();
                // const endTime = performance.now();
                // console.log(`Time taken in customer app is ${(endTime - startTime) / 1000} seconds`);
            }
        };
        if (eventType)
            window.addEventListener('message', authResponse);
        return () => window.removeEventListener('message', authResponse);
    }, [eventType]);
    return {
        globalData,
    };
}
