"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTriaConnector = exports.parseEventData = void 0;
const react_1 = require("react");
const constants_1 = require("../utils/constants");
/**
 *
 * @param event event
 * @param type event type waiting for - like "Login, Signup, Sign"
 * @returns Json parsed data - message from the event
 */
const parseEventData = (event /*type: string*/) => {
    let data;
    try {
        data = JSON.parse(event.data);
    }
    catch (err) {
        data = event.data;
    }
    return data;
};
exports.parseEventData = parseEventData;
function useTriaConnector({ authUrl = 'https://auth.tria.so', walletUrl = 'https://wallet.tria.so', }) {
    const iglobalData = new Map();
    const [globalData, setGlobalData] = (0, react_1.useState)(iglobalData);
    const setTriaStore = (eventData) => {
        if (eventData === null || eventData === void 0 ? void 0 : eventData.success) {
            console.log('setTriaStore');
            console.log(`Save ${eventData} to local storage`);
            window.localStorage.setItem(constants_1.TRIA_WALLET_STORE, JSON.stringify(eventData === null || eventData === void 0 ? void 0 : eventData.data));
        }
        else {
            console.log('Sign up or Login failed!!');
        }
    };
    const disconnect = (eventData) => {
        if (eventData === null || eventData === void 0 ? void 0 : eventData.success)
            window.localStorage.removeItem(constants_1.TRIA_WALLET_STORE);
    };
    const setSelectedChain = (data) => {
        var _a;
        window.localStorage.setItem(constants_1.TRIA_WALLET_SELECTED_CHAIN, (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.chainName);
    };
    const isSignUpEvent = (eventType) => {
        return eventType.includes('Sign up') || eventType == 'Log in';
    };
    // For react
    (0, react_1.useEffect)(() => {
        const authResponse = (event) => {
            // console.log('event.origin', event.origin);
            // console.log('walletUrl', walletUrl);
            // console.log('authUrl', authUrl);
            if (!(event.origin == walletUrl || event.origin == authUrl))
                return;
            const eventData = (0, exports.parseEventData)(event /*eventType*/);
            const eventType = eventData === null || eventData === void 0 ? void 0 : eventData.type;
            if (!eventType)
                return;
            console.log(event.data);
            if (isSignUpEvent(eventType)) {
                console.log('is a sign up or login event');
                setTriaStore(eventData);
            }
            else if (eventType == constants_1.eventTypes.switchChain) {
                setSelectedChain(eventData);
            }
            else if (eventType == constants_1.eventTypes.disconnect || eventType == constants_1.eventTypes.logout) {
                disconnect(eventData);
            }
            const tempMap = new Map();
            tempMap.set(`${eventType}`, eventData);
            console.log({ tempMap });
            const newMap = new Map([...globalData, ...tempMap]);
            setGlobalData(newMap);
        };
        window.addEventListener('message', authResponse);
        return () => window.removeEventListener('message', authResponse);
    }, []);
    return {
        globalData,
    };
}
exports.useTriaConnector = useTriaConnector;
