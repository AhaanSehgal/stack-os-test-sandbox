import axios from 'axios';
import { DidDataResponse } from './types';
import { ENV, GetAllAddressesResponse } from '../../types';
import { getSubgraphUrl } from '../constants';

export const getAddresses = async (
  triaName: string,
  environment?: ENV
): Promise<GetAllAddressesResponse> => {
  try {
    console.log('DID resolving..');

    var data = JSON.stringify({
      query: `query MyQuery($id: ID!, $didName: String!) {
              didToEvmAddress(id: $id) {
                did
                evmAddress
              }
              didToNonEvmAddresses(where: {did: $didName}) {
                did
                nonEvmAddress
                chain {
                  id
                  chainName
                }
              }
            }`,
      variables: { id: triaName, didName: triaName },
    });

    var config = {
      method: 'post',
      url: getSubgraphUrl(environment),
      headers: {
        'Content-Type': 'application/json',
      },
      data: data,
    };

    const {
      data: { data: didData },
    } = await axios(config);

    if (didData) return { success: true, data: didData as DidDataResponse };
    else return { success: false, data: null, message: 'DID does not exist' };
  } catch (err) {
    throw err;
  }
};

// export const resolveATriaName = async (triaName: string, chainName: string, environment?: ENV) => {
//   // const triaName = subnameToTriaName(lookUpTriaName);
//   try {
//     console.log('DID resolving..');

//     var data = JSON.stringify({
//       query: `query MyQuery($id: ID!, $didName: String!, $chainNameVar: String!) {
//             didToEvmAddress(id: $id) {
//               did
//               evmAddress
//             }
//             didToNonEvmAddresses(where: {did: $didName, chain_: {chainName: $chainNameVar}}) {
//               did
//               nonEvmAddress
//               chain {
//                 id
//                 chainName
//               }
//             }
//           }`,
//       variables: { id: triaName, didName: triaName, chainNameVar: chainName },
//     });

//     var config = {
//       method: 'post',
//       url: getSubgraphUrl(environment),
//       headers: {
//         'Content-Type': 'application/json',
//         Cookie:
//           '__cf_bm=Erpt9czA1mmUmdjRKr.2U0FfrQ4LdaZCpjcr2y_rjMo-1696236863-0-AbqNv0BCbA3FLaJV95V45r2NkHsJBBnYthsTHTogS5n1XPwkRMDwz5HY3Op+cTGwwG0gFXfj/74MGfpq/GwObUk=',
//       },
//       data: data,
//     };

//     const { data: didData } = await axios(config);
//     console.log({ didData });

//     const evmAddress = didData?.data?.didToEvmAddress?.evmAddress;

//     if (!evmAddress) throw Error('DID does not exist!');

//     // if chainName is not in EVM
//     // return didData.data.didToNonEvmAddresses[0].nonEvmAddress;
//     return { address: evmAddress };
//   } catch (err) {
//     throw Error('Unable to resolve DID.');
//   }
// };
