import BackendService from './index';
import { errorHandler } from '../utils/helper';
import { formatChainNames } from '../utils/format';
import { getAddresses } from '../utils/did';
import { ENV } from '../types';
class userService extends BackendService {
  environment: ENV;

  constructor(apiUrl: string, environment: ENV = 'mainnet') {
    super(apiUrl);
    this.environment = environment;
  }

  async get_tID() {
    try {
      const { data } = await this.triaAxios.get('/user/get-tID');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getActions() {
    try {
      const { data } = await this.triaAxios.get('/user/getactions');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async requestAmount({ tag, payload }: { tag: string; payload: Object }) {
    try {
      const { data } = await this.triaAxios.post('/user/request-amount', {
        tag,
        payload,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async completeAction({ actionId }: { actionId: string }) {
    try {
      const { data } = await this.triaAxios.post('/user/complete-action', {
        actionId,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async ignoreAction({ actionId }: { actionId: string }) {
    try {
      const { data } = await this.triaAxios.post('/user/ignore-action', {
        actionId,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getConversation({ participantName }: { participantName: string }) {
    try {
      const { data } = await this.triaAxios.get('/user/getConversation', {
        params: {
          participantName: participantName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async search({ term }: { term: string }) {
    try {
      const { data } = await this.triaAxios.get('/search', {
        params: {
          query: term,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async searchUser({ term }: { term: string }) {
    try {
      const { data } = await this.triaAxios.get('/searchUser', {
        params: {
          query: term,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getSubnames() {
    try {
      const { data } = await this.triaAxios.get('/user/get-subnames');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAllAddresses(triaName: string) {
    try {
      const data = await getAddresses(triaName, this.environment);
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAllHistory(
    triaName: string,
    filter: 'all' | 'transactionSent' | 'transactionReceived' = 'all',
    filterChainNames?: string[]
  ) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getAllHistory', {
        params: {
          triaName,
          filter,
          filterChainNames: chainNames,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getOnChainConversation(triaName: string, withTriaName: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getOnChainConversation', {
        params: {
          triaName,
          withTriaName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getTotalBalance(triaName: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getTotalBalance', {
        params: {
          triaName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssets(
    triaName: string,
    filterChainNames?: string[],
    filter?: 'all' | 'favorites',
    sort?: 'amountAsc' | 'amountDesc'
  ) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getAssets', {
        params: {
          triaName,
          filterChainNames: chainNames,
          filter,
          sort,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetsForATriaName(
    triaName: string,
    filterChainNames?: string[],
    sort?: 'amountAsc' | 'amountDesc'
  ) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getAssetsForATriaName', {
        params: {
          triaName,
          filterChainNames: chainNames,
          sort,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAsset(triaName: string, chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getAsset', {
        params: {
          triaName,
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetBalanceForATriaName(triaName: string, chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getAssetBalanceForATriaName', {
        params: {
          triaName,
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetDetails(triaName: string, chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getAssetDetails', {
        params: {
          triaName,
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getSubnamesForAsset(chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getSubnamesForAsset', {
        params: {
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAllSubnamesForAsset(chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getAllSubnamesForAsset', {
        params: {
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetHistory(triaName: string, chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getAssetHistory', {
        params: {
          triaName,
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNFTs(
    triaName: string,
    sort: 'A-Z' | 'Z-A' | 'Ascending buy date' | 'Descending buy date' = 'Descending buy date',
    filter?: 'all' | 'favorites',
    filterByCollectionId?: string,
    filterChainNames?: string[]
  ) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getNFTs', {
        params: {
          triaName,
          filter,
          sort,
          filterByCollectionId,
          filterChainNames: chainNames,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNFTCollections(triaName: string, filterChainNames?: string[]) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getNFTCollections', {
        params: {
          triaName,
          filterChainNames: chainNames,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNFTDetails(triaName: string, chainName: string, tokenAddress: string, tokenId: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getNFTDetails', {
        params: {
          triaName,
          chainName,
          tokenAddress,
          tokenId,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAllNfts(
    filter?: 'all' | 'favorites',
    filterAssetGroup?: string,
    filterChainNames?: string[]
    // sort?: 'amountAsc' | 'amountDesc'
  ) {
    if (filterChainNames) {
      var chainNames = formatChainNames(filterChainNames as string[]);
    }
    try {
      const { data } = await this.triaAxios.get('/user/getAllNfts', {
        params: {
          filter,
          filterAssetGroup,
          filterChainNames: chainNames,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNftDetails(chainName: string, tokenAddress: string, tokenId: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getNftDetails', {
        params: {
          chainName,
          tokenAddress,
          tokenId,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNftHistory(chainName: string, tokenAddress: string, tokenId: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getNftHistory', {
        params: {
          chainName,
          tokenAddress,
          tokenId,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getUserByAddress(address: string, chainName: string) {
    try {
      const { data } = await this.triaAxios.get('/wallet/resolve-address', {
        params: {
          address,
          chainName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAddressByChainName(triaName: string, chainName: string) {
    try {
      // const data = await resolveATriaName(triaName, chainName, this.environment);
      // return data;
      const { data } = await this.triaAxios.post('/wallet/resolveTriaName', {
        chainName,
        lookUpTriaName: triaName,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getNextSubname() {
    try {
      const { data } = await this.triaAxios.get('/user/get-next-subname');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getRampnalysisUrl(address: string, coinSymbol: string) {
    try {
      const { data } = await this.triaAxios.get('/get-rampnalysis-url', {
        params: {
          address,
          coinSymbol,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getRampnalysisSupportedToken(query: string) {
    try {
      const { data } = await this.triaAxios.get('/getRampnalysisSupportedToken', {
        params: {
          query,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async convertToken(chainName: string, fromToken: string, fromAmount: number, toToken: string) {
    try {
      const { data } = await this.triaAxios.post('/user/convertToken', {
        chainName,
        fromToken,
        fromAmount,
        toToken,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAllNetworks() {
    try {
      const { data } = await this.triaAxios.get('/getAllNetworks');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getChainNameByTriaName(triaName: string) {
    try {
      const { data } = await this.triaAxios.get('/user/getChainNameByTriaName', {
        params: {
          triaName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async markAssetAsFavourite(chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.post('/user/markAssetAsFavourite', {
        tokenAddress,
        chainName,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async unMarkAssetAsFavourite(chainName: string, tokenAddress?: string) {
    try {
      const { data } = await this.triaAxios.post('/user/unMarkAssetAsFavourite', {
        tokenAddress,
        chainName,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async markNFTsAsFavourite(chainName: string, tokenAddress: string, tokenId: string) {
    try {
      const { data } = await this.triaAxios.post('/user/markNFTsAsFavourite', {
        chainName,
        tokenAddress,
        tokenId,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async unMarkNFTsAsFavourite(chainName: string, tokenAddress: string, tokenId: string) {
    try {
      const { data } = await this.triaAxios.post('/user/unMarkNFTsAsFavourite', {
        chainName,
        tokenAddress,
        tokenId,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetChartData(
    symbol: string,
    timePeriod: 'daily' | 'hourly' = 'daily',
    interval: string = 'daily',
    count: number = 10
  ) {
    try {
      const { data } = await this.triaAxios.get('/getAssetChartData', {
        params: {
          symbol,
          timePeriod,
          interval,
          count,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAssetChart(
    timePeriod: 'hour' | 'day' | 'week' | 'month' | 'year' | 'max',
    chainName: string,
    tokenAddress?: string
  ) {
    try {
      const { data } = await this.triaAxios.get('/getAssetChart', {
        params: {
          timePeriod,
          chainName,
          tokenAddress,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async claimDrinks() {
    try {
      const { data } = await this.triaAxios.post('/user/bali-beta/claimDrinks');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async hasClaimed() {
    try {
      const { data } = await this.triaAxios.get('/user/bali-beta/hasClaimed');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async updateAvatar(accessToken: string) {
    try {
      const { data } = await this.triaAxios.post(
        '/user/update-avatar',
        {},
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getAvatar(accessToken: string) {
    try {
      const { data } = await this.triaAxios.get('/user/get-avatar', {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getPopularToken() {
    try {
      const { data } = await this.triaAxios.get('/get-popular-token');
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async searchBuyToken(tokenName: string, currentChainName: string) {
    try {
      const { data } = await this.triaAxios.get('/search-buy-assets', {
        params: { tokenName, currentChainName },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async addUserActivity(triaName: string, sentToTriaName: string) {
    try {
      const { data } = await this.triaAxios.post('/user/activity', {
        triaName,
        sentToTriaName,
      });

      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async getRecentUsersForUser(triaName: string) {
    try {
      const { data } = await this.triaAxios.get('/user/recentUsers', {
        params: {
          triaName,
        },
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async deleteARecentUser(user: string, recentUser: string) {
    try {
      const { data } = await this.triaAxios.post('/user/activity/delete', {
        user,
        recentUser,
      });
      return data;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }
}

export default userService;
