import { Approve, ContractDetails, NFTDetails, ReadContractResponse, Send, Swap, TriaArgs, TxnResponse, TxnResponseSuccess } from '../types';
import { KeyringController } from './keyring.controller';
export declare class WalletController extends KeyringController {
    selectedChainName: string | undefined;
    constructor({ baseUrl, walletType, selectedChainName, environment }: TriaArgs);
    signMessage(message: string, chainName?: string): Promise<any>;
    waitForTransaction(txn: TxnResponse): Promise<TxnResponseSuccess>;
    send(payload: Send, chainName?: string): Promise<TxnResponse>;
    approve(payload: Approve, chainName?: string): Promise<TxnResponse>;
    swap(payload: Swap, chainName?: string): Promise<TxnResponse>;
    sendNFT(recipientTriaName: string, nftDetails: NFTDetails, chainName?: string): Promise<TxnResponse>;
    /**
     * Bali beta specific
     *
     */
    burnNFT(nftDetails: NFTDetails, chainName?: string): Promise<TxnResponse>;
    /**
     * Interact with any external contract
     * @param contractDetails
     * @param chainName
     * @returns
     */
    callContract(contractDetails: ContractDetails, chainName?: string): Promise<TxnResponse>;
    readContract(contractDetails: ContractDetails, chainName?: string): Promise<ReadContractResponse>;
}
