import { Multichain } from '../utils/helper/multichain';
import { CheckTokenAllowanceResponse, SwapTargetResponse, FeeResponse, TriaArgs, Send, Swap, NFTDetails } from '../types';
import WalletService from '../services/wallet';
export declare class ChainController extends Multichain {
    apiUrl: string;
    walletService: WalletService;
    /**
     * Constructs a new instance of the Tria class.
     * @param apiUrl - The URL of the API.
     */
    constructor({ baseUrl, walletType }: TriaArgs);
    /**
     * @param triaName triaName
     * @param chainName chainName
     */
    resolveTriaName(triaName: string, chainName: string): Promise<string>;
    checkTokenAllowance(triaName: string, chainName: string, tokenAddress: string | null, amount: number): Promise<CheckTokenAllowanceResponse>;
    getSendFee(chainName: string, payload: Send): Promise<FeeResponse>;
    getApproveFee(triaName: string, chainName: string, tokenAddress: string, amount: number): Promise<FeeResponse>;
    getSwapTargets(chainName: string, fromTokenAddress: string | null, listLength: number, query?: string): Promise<SwapTargetResponse[]>;
    getSwapFee(chainName: string, payload: Swap): Promise<FeeResponse>;
    getSendNFTFee(chainName: string, fromTriaName: string, recipientTriaName: string, nftDetails: NFTDetails): Promise<FeeResponse>;
}
