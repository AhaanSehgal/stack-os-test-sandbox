var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Multichain } from '../utils/helper/multichain';
import WalletService from '../services/wallet';
import { isChainSupported } from '@tria-sdk/core';
import { checksumAddress } from '../utils/helper/checksum';
import { isValidAddress } from '../utils/helper/isValidAddress';
export class ChainController extends Multichain {
    /**
     * Constructs a new instance of the Tria class.
     * @param apiUrl - The URL of the API.
     */
    constructor({ baseUrl, walletType }) {
        super(baseUrl, walletType);
        this.apiUrl = baseUrl;
        this.walletService = new WalletService(this.apiUrl);
    }
    /**
     * @param triaName triaName
     * @param chainName chainName
     */
    resolveTriaName(triaName, chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.walletService.resolveTriaName({ chainName, lookUpTriaName: triaName });
            return res.address;
        });
    }
    checkTokenAllowance(triaName, chainName, tokenAddress, amount) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (amount <= 0)
                return { success: false, message: 'Invalid amount' };
            if (!tokenAddress)
                return { success: true, allowance: true };
            const address = yield this.resolveTriaName(triaName, chainName);
            // @ts-ignore
            const res = yield ((_a = this.chains[chainName]) === null || _a === void 0 ? void 0 : _a.checkTokenAllowance({
                accountAddress: address,
                tokenAddress,
                amount,
            }));
            return { success: true, allowance: res };
        });
    }
    getSendFee(chainName, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (payload.amount <= 0)
                return { success: false, message: 'Invalid amount' };
            console.log('getSendFee ', { chainName, payload });
            if (isChainSupported(chainName)) {
                const fromAddress = yield this.resolveTriaName(payload === null || payload === void 0 ? void 0 : payload.fromTriaName, chainName);
                const { recipientTriaName } = payload;
                let recipientAddress;
                if (!recipientTriaName.includes('@tria') && isValidAddress(recipientTriaName))
                    recipientAddress = checksumAddress(payload.recipientTriaName);
                else
                    recipientAddress = yield this.resolveTriaName(payload.recipientTriaName, chainName);
                // const recipientAddress = await this.resolveTriaName(payload.recipientTriaName, chainName);
                const res = yield this.chains[chainName].getSendFee(fromAddress, recipientAddress, payload.amount, payload === null || payload === void 0 ? void 0 : payload.tokenAddress);
                return res;
            }
            else {
                return { success: false, message: 'Chain not supported' };
            }
        });
    }
    getApproveFee(triaName, chainName, tokenAddress, amount) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (amount <= 0)
                return { success: false, message: 'Invalid amount' };
            const fromAddress = yield this.resolveTriaName(triaName, chainName);
            // @ts-ignore
            const res = yield ((_a = this.chains[chainName]) === null || _a === void 0 ? void 0 : _a.getApproveFee(fromAddress, tokenAddress, amount));
            return res;
        });
    }
    getSwapTargets(chainName, fromTokenAddress, listLength, query) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            const res = yield ((_a = this.chains[chainName]) === null || _a === void 0 ? void 0 : _a.getSwapTargets(fromTokenAddress, listLength, query));
            return res;
        });
    }
    getSwapFee(chainName, payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (payload.fromAmount <= 0)
                return { success: false, message: 'Invalid amount' };
            const fromAddress = yield this.resolveTriaName(payload === null || payload === void 0 ? void 0 : payload.triaName, chainName);
            const { fromTokenAddress, toTokenAddress, fromAmount, slippage } = payload;
            // @ts-ignore
            const res = yield ((_a = this.chains[chainName]) === null || _a === void 0 ? void 0 : _a.getSwapFee(fromAddress, fromTokenAddress, toTokenAddress, fromAmount, slippage));
            return res;
        });
    }
    getSendNFTFee(chainName, fromTriaName, recipientTriaName, nftDetails) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (nftDetails.amount <= 0)
                return { success: false, message: 'Invalid amount' };
            if (isChainSupported(chainName)) {
                const fromAddress = yield this.resolveTriaName(fromTriaName, chainName);
                let recipientAddress;
                if (!recipientTriaName.includes('@tria') && isValidAddress(recipientTriaName))
                    recipientAddress = checksumAddress(recipientTriaName);
                else
                    recipientAddress = yield this.resolveTriaName(recipientTriaName, chainName);
                // @ts-ignore
                const res = yield ((_a = this.chains[chainName]) === null || _a === void 0 ? void 0 : _a.getSendNFTFee(fromAddress, recipientAddress, nftDetails));
                return res;
            }
            else if (isChainSupported(chainName)) {
                return { success: false, message: 'Chain not supported' };
            }
            else {
                return { success: false, message: 'Chain not supported' };
            }
        });
    }
}
