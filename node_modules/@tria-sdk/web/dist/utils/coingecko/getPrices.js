var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { coinGeckoChainIds, coinGeckoNativeTokenIds } from "./constants";
export const getTokenPrice = (chainName, tokenAddress) => __awaiter(void 0, void 0, void 0, function* () {
    let tokenData;
    if (tokenAddress)
        tokenData = yield getAssetPrice(chainName, tokenAddress);
    else
        tokenData = yield getNativeTokenPrice(chainName);
    console.log({ tokenData });
    return tokenData;
});
const getAssetPrice = (chainName, tokenAddress) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { data } = yield axios({
            method: "GET",
            //@ts-ignore
            url: `https://api.coingecko.com/api/v3/simple/token_price/${coinGeckoChainIds[chainName]}`,
            params: {
                //@ts-ignore
                contract_addresses: tokenAddress,
                vs_currencies: "usd",
                include_24hr_change: true
            }
        });
        const tokenData = data === null || data === void 0 ? void 0 : data[tokenAddress.toLowerCase()];
        if (tokenData && tokenData.usd) {
            return tokenData;
        }
        else {
            throw new Error('Failed to fetch token price');
        }
    }
    catch (error) {
        console.error(error);
        throw new Error('An error occurred while fetching token price.');
    }
});
const getNativeTokenPrice = (chainName) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { data } = yield axios({
            method: "GET",
            url: 'https://api.coingecko.com/api/v3/simple/price',
            params: {
                //@ts-ignore
                ids: coinGeckoNativeTokenIds[chainName],
                vs_currencies: "usd",
                include_24hr_change: true
            }
        });
        // @ts-ignore
        const tokenData = data === null || data === void 0 ? void 0 : data[coinGeckoNativeTokenIds[chainName]];
        if (tokenData && tokenData.usd) {
            return tokenData;
        }
        else {
            throw new Error('Failed to fetch token price');
        }
    }
    catch (error) {
        console.error(error);
        throw new Error('An error occurred while fetching token price.');
    }
});
// getTokenPrice("POLYGON", "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174")
