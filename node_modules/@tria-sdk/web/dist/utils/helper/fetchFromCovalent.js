var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { covalentChainNames } from './constants';
import axios from 'axios';
// require('dotenv').config();
const covalentApiBaseUrl = `https://api.covalenthq.com/v1`;
const apiKey = 'cqt_wFX4QgjTxgTQQMrxJJHJYjvK9jgJ'; //process.env.COVALENT_API_KEY_MAIN;
export const fetchAssetsFromCovalent = (chainName, address, filter) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    //@ts-ignore
    const chain = covalentChainNames[chainName];
    console.log(chain);
    const { data } = yield axios({
        url: `${covalentApiBaseUrl}/${chain}/address/${address}/balances_v2/`,
        method: 'GET',
        headers: {
            Authorization: `Bearer ${apiKey}`,
        },
    });
    // const items = [];
    // Remove null values from array // use simple for loop
    const chainAssets = (_b = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.map((item) => {
        const balanceInTokens = parseInt(item.balance) / Math.pow(10, item.contract_decimals); //.toString();
        if (filter === 'tokens' && item.native_token)
            return null;
        return {
            name: item.contract_name,
            symbol: item.contract_ticker_symbol,
            logoUrl: item.logo_url,
            chainName,
            balanceInTokens: balanceInTokens.toString(),
            balanceOfTokensInUnits: item.balance,
            decimals: item.contract_decimals,
            balanceInUSD: item.pretty_quote.slice(1),
            tokenAddress: item.native_token ? null : item === null || item === void 0 ? void 0 : item.contract_address,
            isNativeToken: item.native_token,
            // 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
        };
    }).filter((item) => item !== null);
    console.log({ chainAssets });
    return chainAssets;
});
export const fetchAssetDetailsFromCovalent = (chainName, address, tokenAddress) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    // @ts-ignore
    const chain = covalentChainNames[chainName];
    const { data } = yield axios({
        url: `${covalentApiBaseUrl}/${chain}/address/${address}/transfers_v2/`,
        method: 'GET',
        headers: {
            Authorization: `Bearer ${apiKey}`,
        },
        params: {
            'contract-address': tokenAddress,
        },
    });
    const history = (_c = data === null || data === void 0 ? void 0 : data.data) === null || _c === void 0 ? void 0 : _c.items;
    return history;
});
// fetchAssetDetailsFromCovalent(
//   'POLYGON',
//   '0x1dE58d46D05a379e020b1cBED0Db98a2F55831B2',
//   '0x2791bca1f2de4661ed88a30c99a7a9449aa84174' // USDC
// );
export const fetchHistoryFromCovalent = (chainName, address, filter = 'all', // assets selected // choose asset type -> we can filter using symbols
assetType) => __awaiter(void 0, void 0, void 0, function* () {
    var _d;
    //@ts-ignore
    const chain = covalentChainNames[chainName];
    const page = 0; // The requested page, 0-indexed.
    const { data } = yield axios({
        url: `${covalentApiBaseUrl}/${chain}/address/${address}/transactions_v3/page/${page}/`,
        method: 'GET',
        headers: {
            Authorization: `Bearer ${apiKey}`,
        },
    });
    const transactions = (_d = data === null || data === void 0 ? void 0 : data.data) === null || _d === void 0 ? void 0 : _d.items;
    let history = transactions
        .map((txn) => {
        // console.log(txn);
        // return;
        var _a, _b, _c, _d, _e, _f, _g;
        // console.log(txn.log_events);
        let asset = null;
        const events = (txn === null || txn === void 0 ? void 0 : txn.log_events) || [];
        for (let event of events) {
            // console.log(event?.decoded);
            if (((_a = event === null || event === void 0 ? void 0 : event.decoded) === null || _a === void 0 ? void 0 : _a.name) === 'Transfer') {
                // console.log(event?.decoded?.params);
                if (((_b = event === null || event === void 0 ? void 0 : event.decoded) === null || _b === void 0 ? void 0 : _b.params[0].value) === address.toLowerCase()) {
                    const assetSent = ((_c = event === null || event === void 0 ? void 0 : event.decoded) === null || _c === void 0 ? void 0 : _c.params[0].value) === address.toLowerCase();
                    const assetReceived = ((_d = event === null || event === void 0 ? void 0 : event.decoded) === null || _d === void 0 ? void 0 : _d.params[1].value) === address.toLowerCase();
                    const assetValue = (_e = event === null || event === void 0 ? void 0 : event.decoded) === null || _e === void 0 ? void 0 : _e.params[2].value;
                    if (assetSent) {
                        asset = {
                            value: assetValue,
                            sentTo: (_f = event === null || event === void 0 ? void 0 : event.decoded) === null || _f === void 0 ? void 0 : _f.params[1].value,
                        };
                    }
                    else if (assetReceived) {
                        asset = {
                            value: assetValue,
                            receivedFrom: (_g = event === null || event === void 0 ? void 0 : event.decoded) === null || _g === void 0 ? void 0 : _g.params[0].value,
                        };
                    }
                }
            }
        }
        let item = {
            time: txn.block_signed_at,
            chainName,
            txnHash: txn.tx_hash,
            success: txn.successful,
            from: txn.from_address,
            to: txn.to_address,
            value: txn.value,
            valueInUSD: txn.pretty_value_quote.slice(1),
            feesPaid: txn.fees_paid,
            decimals: txn.gas_metadata.contract_decimals,
            gasSpent: txn.gas_spent,
            gasFeesInUSD: txn.pretty_gas_quote.slice(1),
            txnSent: txn.from_address === address.toLowerCase(),
            txnReceived: txn.to_address === address.toLowerCase(),
            asset,
            // viewInExplorer: '', // TBA
        };
        // return item;
        if (filter === 'all')
            return item;
        else if (filter === 'transactionSent' && item.from === address.toLowerCase())
            return item;
        else if (filter === 'transactionReceived' && item.to === address.toLowerCase())
            return item;
        else if (filter === 'assets') {
            // write login
            // return only tokens in asset types
            return;
        }
        else
            return null;
    })
        .filter((item) => item !== undefined);
    // console.log(history);
    return history;
});
// fetchHistoryFromCovalent('ETH', '0x1dE58d46D05a379e020b1cBED0Db98a2F55831B2');
// fetchAssetsFromCovalent('ETH', '0x1dE58d46D05a379e020b1cBED0Db98a2F55831B2', 'all');
// fetchAssetsFromCovalent('SOLANA', '4KMwvyGmUoN7ht5SWwacMQYP4fbmyDX2VyNHPtK36dJU'); // -> does not work
// fetchAssetsFromCovalent('BITCOIN', 'bc1qrjs8a9tqya99qt9wd5xqz97qa97cnwjjyfxvpr'); // -> works
