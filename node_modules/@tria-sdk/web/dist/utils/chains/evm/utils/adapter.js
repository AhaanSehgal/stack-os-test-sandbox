var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getPublicClient, getWalletClient, } from '@wagmi/core';
import { providers } from 'ethers';
export function publicClientToProvider(publicClient) {
    var _a, _b;
    const { chain, transport } = publicClient;
    const network = {
        chainId: chain.id,
        name: chain.name,
        ensAddress: (_b = (_a = chain.contracts) === null || _a === void 0 ? void 0 : _a.ensRegistry) === null || _b === void 0 ? void 0 : _b.address,
    };
    if (transport.type === 'fallback')
        return new providers.FallbackProvider(transport.transports.map(({ value }) => new providers.JsonRpcProvider(value === null || value === void 0 ? void 0 : value.url, network)));
    return new providers.JsonRpcProvider(transport.url, network);
}
/** Action to convert a viem Public Client to an ethers.js Provider. */
export function getEthersProvider({ chainId } = {}) {
    const publicClient = getPublicClient({ chainId });
    return publicClientToProvider(publicClient);
}
export function walletClientToSigner(walletClient) {
    var _a, _b;
    const { account, chain, transport } = walletClient;
    const network = {
        chainId: chain.id,
        name: chain.name,
        ensAddress: (_b = (_a = chain.contracts) === null || _a === void 0 ? void 0 : _a.ensRegistry) === null || _b === void 0 ? void 0 : _b.address,
    };
    const provider = new providers.Web3Provider(transport, network);
    const signer = provider.getSigner(account.address);
    return signer;
}
/** Action to convert a viem Wallet Client to an ethers.js Signer. */
export function getEthersSigner({ chainId } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const walletClient = yield getWalletClient({ chainId });
        if (!walletClient)
            return undefined;
        return walletClientToSigner(walletClient);
    });
}
