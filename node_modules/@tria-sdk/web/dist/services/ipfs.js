var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import BackendService from "./index";
import { errorHandler } from "../utils/helper";
class IPFSService extends BackendService {
    constructor(apiUrl) {
        super(apiUrl);
    }
    getKeyLinkShards(tID, SHA256ShadowHash) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(this.triaAxios.getUri());
            try {
                const { data } = yield this.triaAxios.get("/ipfs/getkeylink", {
                    params: { tID: tID, SHA256ShadowHash: SHA256ShadowHash }
                });
                console.log(data);
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    resolveName(ipfsName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data: { data } } = yield this.triaAxios.post("/ipfs/resolvename", {
                    ipfsName: ipfsName
                }, {});
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    fetchIPFSData(cid) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data: { data } } = yield this.triaAxios.post("/ipfs/resolvecid", {
                    cid: cid
                }, {});
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
}
export default IPFSService;
