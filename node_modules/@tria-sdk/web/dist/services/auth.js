var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import BackendService from "./index";
import { errorHandler } from "../utils/helper";
class AuthService extends BackendService {
    constructor(apiUrl) {
        super(apiUrl);
    }
    initiateOTP({ input }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/otp/initiate", {
                    input
                });
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    verifyOTP({ otp, session, input }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/otp/verify", {
                    otp,
                    session,
                    input
                });
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/issue-token");
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    getUserSession() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/get-session");
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    getKey() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/get-key");
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
}
export default AuthService;
