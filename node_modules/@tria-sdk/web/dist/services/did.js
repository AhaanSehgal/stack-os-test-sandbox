var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import BackendService from './index';
import { errorHandler } from '../utils/helper';
class DIDService extends BackendService {
    constructor(apiUrl) {
        super(apiUrl);
    }
    createDID({ did, evmChainData, nonEvmChainsData }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('did/create', {
                    did,
                    evmChainData,
                    nonEvmChainsData,
                });
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    checkDID(did) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/did/check', {
                    did: did,
                });
                if (data.success) {
                    return data.response.availabilityStatus;
                }
                else {
                    return false;
                }
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    shardStorage({ hash, link }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('did/shard-storage', {
                    hash,
                    link,
                });
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
    shardExists(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('did/shard-exists', {
                    hash,
                });
                return data;
            }
            catch (err) {
                return errorHandler(err);
            }
        });
    }
}
export default DIDService;
