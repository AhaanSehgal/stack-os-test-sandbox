import { ethers } from 'ethers';
export interface SendPayload {
    signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
    recipientAddress: string;
    amount: number;
    tokenAddress?: string | number | Object;
    coinObject?: Object;
    fromAddress?: string;
}
export interface GetContract {
    contractAddress: string;
    abi?: any[];
}
export interface SwapPayload {
    signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
    fromTokenAddress: string;
    toTokenAddress: string;
    amount: number;
    slippage: number;
    fromAddress?: string;
}
export interface ApprovePayload {
    signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
    tokenAddress: string;
    amount: number;
    spender: string;
    fromAddress?: string;
}
export interface CheckTokenAllowance {
    accountAddress: string;
    tokenAddress: string | null;
    amount: number;
    spender: string;
}
export interface BroadcastTransaction {
    signer: ethers.Wallet;
    txnObject: Object;
}
export interface NFTDetails {
    type: string;
    tokenAddress: string;
    tokenId: string;
    amount: number;
}
export interface NFTDetail {
    type: string;
    tokenAddress: string;
    tokenUri: string;
}
