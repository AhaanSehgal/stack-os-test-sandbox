import { ethers } from 'ethers';

export interface SendPayload {
  // privateKey: string;
  signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
  recipientAddress: string;
  amount: number;
  tokenAddress?: string | number | Object; // not required in case of native token
  // number -> for assetId -> in case of polkadot
  // Object -> coinObject for sui assets
  // can make it a required param later for native assets too,
  // if we return tokenAddress for native ones too -> in getAllAssets()
  // whatever you get from getAllAssets and select the one in the list
  // you pass to this tokenAddress
  coinObject?: Object; // specific to sui // might not be required
  fromAddress?: string; // needed for creating aptos account
  // keypair?: Ed25519Keypair;
}

export interface GetContract {
  contractAddress: string;
  abi?: any[];
}

export interface SwapPayload {
  // privateKey: string;
  signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
  fromTokenAddress: string;
  toTokenAddress: string;
  amount: number;
  slippage: number;
  fromAddress?: string;
}

export interface ApprovePayload {
  // privateKey: string;
  signer: ethers.Wallet | ethers.providers.JsonRpcSigner;
  tokenAddress: string;
  amount: number;
  spender: string;
  fromAddress?: string;
}

export interface CheckTokenAllowance {
  accountAddress: string;
  tokenAddress: string | null;
  amount: number;
  spender: string;
}

export interface BroadcastTransaction {
  signer: ethers.Wallet;
  txnObject: Object;
}

export interface NFTDetails {
  type: string;
  tokenAddress: string;
  tokenId: string;
  amount: number;
}

export interface NFTDetail {
  type: string;
  tokenAddress: string;
  tokenUri: string;
}
