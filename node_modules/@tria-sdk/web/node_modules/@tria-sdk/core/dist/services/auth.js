"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
const helper_1 = require("../utils/helper");
class AuthService extends index_1.default {
    constructor(apiUrl) {
        super(apiUrl);
    }
    login({ triaName, password, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/login", {
                    triaName,
                    password,
                    pin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/logout");
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    unauthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/unauthenticated");
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    deleteAccount({ password, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/delete-account", {
                    password,
                    pin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    register({ username, usernameExtension, password, passwordVerify, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/register", {
                    username,
                    usernameExtension,
                    password,
                    passwordVerify,
                    pin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    updatePassword({ newPassword, oldPassword, pin, verifyNewPassword }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/update-password", {
                    newPassword,
                    oldPassword,
                    pin,
                    verifyNewPassword
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    checkUsername({ usernameWithExtension }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.triaAxios.get("/auth/check-username", {
                    params: { usernameWithExtension: usernameWithExtension }
                });
                if (data.status === 409) {
                    return { isExist: true, success: true };
                }
                else if (data.status === 202) {
                    return { isExist: false, success: true };
                }
                return { isExist: null, success: false };
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/refresh-token");
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    passwordVerify({ password }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/password-verify", {
                    password: password
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    pinVerify({ pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/pin-verify", {
                    pin: pin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    pinAndPasswordVerify({ triaName, password, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/password-pin-verify", {
                    pin,
                    triaName,
                    password,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    updatePin({ newPin, oldPin, password, verifyNewPin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/update-pin", {
                    newPin,
                    password,
                    oldPin,
                    verifyNewPin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    initiateOTP({ input }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/otp/initiate", {
                    input
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    verifyOTP({ otp, session, input }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/otp/verify", {
                    otp,
                    session,
                    input
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/issue-token");
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getKey(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/get-key", {
                    headers: {
                        'Authorization': `Bearer ${accessToken}` // Set the Authorization header with the Bearer token
                    }
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    saveOauthUser({ userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/save-oauth-user", {
                    triaNameHash,
                    userOauthId,
                    isPasswordRequired,
                    password,
                    platform
                }, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}` // Set the Authorization header with the Bearer token
                    }
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    checkLinkEmailExists({ email }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get("/auth/link/email-exists", {
                    params: { email }
                });
                return data.emailExist;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    initiateEmailLinkAuth({ email, password, origin }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/link/initiate", {
                    email, password, origin
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    emailLinkVerification({ email, code }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post("/auth/link/verify", {
                    email, code
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
}
exports.default = AuthService;
