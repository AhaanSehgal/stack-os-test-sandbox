"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
const helper_1 = require("../utils/helper");
const format_1 = require("../utils/format");
const did_1 = require("../utils/did");
class userService extends index_1.default {
    constructor(apiUrl, environment = 'mainnet') {
        super(apiUrl);
        this.environment = environment;
    }
    get_tID() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/get-tID');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getActions() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getactions');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    requestAmount({ tag, payload }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/request-amount', {
                    tag,
                    payload,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    completeAction({ actionId }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/complete-action', {
                    actionId,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    ignoreAction({ actionId }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/ignore-action', {
                    actionId,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getConversation({ participantName }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getConversation', {
                    params: {
                        participantName: participantName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    search({ term }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/search', {
                    params: {
                        query: term,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    searchUser({ term }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/searchUser', {
                    params: {
                        query: term,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getSubnames() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/get-subnames');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAllAddresses(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, did_1.getAddresses)(triaName, this.environment);
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAllHistory(triaName, filter = 'all', filterChainNames) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getAllHistory', {
                    params: {
                        triaName,
                        filter,
                        filterChainNames: chainNames,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getOnChainConversation(triaName, withTriaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getOnChainConversation', {
                    params: {
                        triaName,
                        withTriaName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getTotalBalance(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getTotalBalance', {
                    params: {
                        triaName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssets(triaName, filterChainNames, filter, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getAssets', {
                    params: {
                        triaName,
                        filterChainNames: chainNames,
                        filter,
                        sort,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetsForATriaName(triaName, filterChainNames, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getAssetsForATriaName', {
                    params: {
                        triaName,
                        filterChainNames: chainNames,
                        sort,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAsset(triaName, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getAsset', {
                    params: {
                        triaName,
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetBalanceForATriaName(triaName, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getAssetBalanceForATriaName', {
                    params: {
                        triaName,
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetDetails(triaName, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getAssetDetails', {
                    params: {
                        triaName,
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getSubnamesForAsset(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getSubnamesForAsset', {
                    params: {
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAllSubnamesForAsset(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getAllSubnamesForAsset', {
                    params: {
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetHistory(triaName, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getAssetHistory', {
                    params: {
                        triaName,
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNFTs(triaName, sort = 'Descending buy date', filter, filterByCollectionId, filterChainNames) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getNFTs', {
                    params: {
                        triaName,
                        filter,
                        sort,
                        filterByCollectionId,
                        filterChainNames: chainNames,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNFTCollections(triaName, filterChainNames) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getNFTCollections', {
                    params: {
                        triaName,
                        filterChainNames: chainNames,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNFTDetails(triaName, chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getNFTDetails', {
                    params: {
                        triaName,
                        chainName,
                        tokenAddress,
                        tokenId,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAllNfts(filter, filterAssetGroup, filterChainNames
    // sort?: 'amountAsc' | 'amountDesc'
    ) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterChainNames) {
                var chainNames = (0, format_1.formatChainNames)(filterChainNames);
            }
            try {
                const { data } = yield this.triaAxios.get('/user/getAllNfts', {
                    params: {
                        filter,
                        filterAssetGroup,
                        filterChainNames: chainNames,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNftDetails(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getNftDetails', {
                    params: {
                        chainName,
                        tokenAddress,
                        tokenId,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNftHistory(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getNftHistory', {
                    params: {
                        chainName,
                        tokenAddress,
                        tokenId,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getUserByAddress(address, chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/wallet/resolve-address', {
                    params: {
                        address,
                        chainName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAddressByChainName(triaName, chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // const data = await resolveATriaName(triaName, chainName, this.environment);
                // return data;
                const { data } = yield this.triaAxios.post('/wallet/resolveTriaName', {
                    chainName,
                    lookUpTriaName: triaName,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getNextSubname() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/get-next-subname');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getRampnalysisUrl(address, coinSymbol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/get-rampnalysis-url', {
                    params: {
                        address,
                        coinSymbol,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getRampnalysisSupportedToken(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/getRampnalysisSupportedToken', {
                    params: {
                        query,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    convertToken(chainName, fromToken, fromAmount, toToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/convertToken', {
                    chainName,
                    fromToken,
                    fromAmount,
                    toToken,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAllNetworks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/getAllNetworks');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getChainNameByTriaName(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/getChainNameByTriaName', {
                    params: {
                        triaName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    markAssetAsFavourite(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/markAssetAsFavourite', {
                    tokenAddress,
                    chainName,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    unMarkAssetAsFavourite(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/unMarkAssetAsFavourite', {
                    tokenAddress,
                    chainName,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    markNFTsAsFavourite(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/markNFTsAsFavourite', {
                    chainName,
                    tokenAddress,
                    tokenId,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    unMarkNFTsAsFavourite(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/unMarkNFTsAsFavourite', {
                    chainName,
                    tokenAddress,
                    tokenId,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetChartData(symbol, timePeriod = 'daily', interval = 'daily', count = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/getAssetChartData', {
                    params: {
                        symbol,
                        timePeriod,
                        interval,
                        count,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAssetChart(timePeriod, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/getAssetChart', {
                    params: {
                        timePeriod,
                        chainName,
                        tokenAddress,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    claimDrinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/bali-beta/claimDrinks');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    hasClaimed() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/bali-beta/hasClaimed');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    updateAvatar(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/update-avatar', {}, {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getAvatar(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/get-avatar', {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getPopularToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/get-popular-token');
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    searchBuyToken(tokenName, currentChainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/search-buy-assets', {
                    params: { tokenName, currentChainName },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    addUserActivity(triaName, sentToTriaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/activity', {
                    triaName,
                    sentToTriaName,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    getRecentUsersForUser(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.get('/user/recentUsers', {
                    params: {
                        triaName,
                    },
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
    deleteARecentUser(user, recentUser) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.triaAxios.post('/user/activity/delete', {
                    user,
                    recentUser,
                });
                return data;
            }
            catch (err) {
                return (0, helper_1.errorHandler)(err);
            }
        });
    }
}
exports.default = userService;
