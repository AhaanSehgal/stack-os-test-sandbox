"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserController = void 0;
const user_1 = __importDefault(require("../services/user"));
class UserController {
    constructor(baseUrl, triaName, environment = 'mainnet') {
        this.baseUrl = baseUrl;
        this.user = new user_1.default(baseUrl, environment);
        this.triaName = triaName;
    }
    get_tID() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.get_tID();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     *
     * @deprecated
     */
    getActions() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getActions();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    requestAmount({ tag, payload }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.requestAmount({ tag, payload });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    completeAction({ actionId }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.completeAction({ actionId });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    ignoreAction({ actionId }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.ignoreAction({ actionId });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getConversation({ participantName }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getConversation({ participantName });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    search(term) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.search({ term });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    searchUser(term) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.searchUser({ term });
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getHomeScreenHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let res = { actions: [], history: [] };
                if (res.actions.length == 0) {
                    let historyRes = yield this.user.getAllHistory(this.triaName);
                    if (historyRes.success && historyRes.history.length > 0)
                        res.history = historyRes.history.slice(0, 3);
                }
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAllAddresses(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAllAddresses((triaName || this.triaName));
                return res;
            }
            catch (err) {
                throw err;
            }
        });
    }
    getSubnames() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getSubnames();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAllHistory(filter = 'all', filterChainNames, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAllHistory((this.triaName || triaName), filter, filterChainNames);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getOnChainConversation(withTriaName, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getOnChainConversation((this.triaName || triaName), withTriaName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssets(filterChainNames, filter, sort, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssets((this.triaName || triaName), filterChainNames, filter, sort);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetsForATriaName(triaName, filterChainNames, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetsForATriaName(triaName, filterChainNames, sort);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAsset(chainName, tokenAddress, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAsset((this.triaName || triaName), chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetBalanceForATriaName(triaName, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetBalanceForATriaName(triaName, chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetDetails(chainName, tokenAddress, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetDetails((this.triaName || triaName), chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getSubnamesForAsset(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getSubnamesForAsset(chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAllSubnamesForAsset(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAllSubnamesForAsset(chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetHistory(chainName, tokenAddress, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetHistory((this.triaName || triaName), chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNFTs(sort = 'Descending buy date', filter, filterByCollectionId, filterChainNames, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNFTs((this.triaName || triaName), sort, filter, filterByCollectionId, filterChainNames);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNFTCollections(filterChainNames, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNFTCollections((this.triaName || triaName), filterChainNames);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNFTDetails(chainName, tokenAddress, tokenId, triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNFTDetails((this.triaName || triaName), chainName, tokenAddress, tokenId);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAllNfts(filter, filterAssetGroup, filterChainNames
    // sort?: 'amountAsc' | 'amountDesc'
    ) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAllNfts(filter, filterAssetGroup, filterChainNames);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNftDetails(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNftDetails(chainName, tokenAddress, tokenId);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNftHistory(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNftHistory(chainName, tokenAddress, tokenId);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getUserByAddress(address, chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getUserByAddress(address, chainName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAddressByChainName(triaName, chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAddressByChainName(triaName, chainName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getNextSubname() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getNextSubname();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    convertToken(chainName, fromToken, fromAmount, toToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.convertToken(chainName, fromToken, fromAmount, toToken);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getRampnalysisUrl(address, coinSymbol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getRampnalysisUrl(address, coinSymbol);
                return res;
            }
            catch (err) {
                return { success: false, url: null };
            }
        });
    }
    getRampnalysisSupportedToken(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getRampnalysisSupportedToken(query);
                return res;
            }
            catch (err) {
                return { success: false, data: null };
            }
        });
    }
    getAllNetworks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAllNetworks();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    markAssetAsFavourite(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.markAssetAsFavourite(chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    markNFTsAsFavourite(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.markNFTsAsFavourite(chainName, tokenAddress, tokenId);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    unMarkAssetAsFavourite(chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.unMarkAssetAsFavourite(chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    unMarkNFTsAsFavourite(chainName, tokenAddress, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.unMarkNFTsAsFavourite(chainName, tokenAddress, tokenId);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetChartData(symbol, timePeriod = 'daily', interval = 'daily', count = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetChartData(symbol, timePeriod, interval, count);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAssetChart(timePeriod, chainName, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAssetChart(timePeriod, chainName, tokenAddress);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getTotalBalance(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getTotalBalance((this.triaName || triaName));
                return res;
            }
            catch (err) {
                return { success: false, message: 'Unable to fetch total balance' };
            }
        });
    }
    getChainNameByTriaName(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getChainNameByTriaName(triaName);
                return res;
            }
            catch (err) {
                return { success: false, chains: [], message: 'Unable to fetch chains for triaName' };
            }
        });
    }
    claimDrinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.claimDrinks();
                return res;
            }
            catch (err) {
                return { success: false, message: 'Unable to claim drinks' };
            }
        });
    }
    hasClaimed() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.hasClaimed();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAvatar(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getAvatar(accessToken);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    updateAvatar(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.updateAvatar(accessToken);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getPopularToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getPopularToken();
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    searchBuyToken(tokenName, currentChainName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.searchBuyToken(tokenName, currentChainName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    addUserActivity(triaName, sentToTriaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.addUserActivity(triaName, sentToTriaName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    getRecentUsersForUser(triaName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.getRecentUsersForUser(triaName);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
    deleteARecentUser(user, recentUser) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.user.deleteARecentUser(user, recentUser);
                return res;
            }
            catch (err) {
                return err;
            }
        });
    }
}
exports.UserController = UserController;
