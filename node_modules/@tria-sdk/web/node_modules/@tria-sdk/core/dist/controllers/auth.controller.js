"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const auth_1 = __importDefault(require("../services/auth"));
class AuthController {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        this.auth = new auth_1.default(baseUrl);
    }
    login({ triaName, password, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.login({ triaName, password, pin });
            return res;
        });
    }
    register({ username, usernameExtension, password, passwordVerify, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.register({ username, usernameExtension, password, passwordVerify, pin });
            return res;
        });
    }
    updatePassword({ newPassword, oldPassword, pin, verifyNewPassword }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.updatePassword({ newPassword, oldPassword, pin, verifyNewPassword });
            return res;
        });
    }
    updatePin({ newPin, oldPin, password, verifyNewPin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.updatePin({ newPin, oldPin, password, verifyNewPin });
            return res;
        });
    }
    checkUsername(usernameWithExtension) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.checkUsername({ usernameWithExtension });
            return res;
        });
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.refreshToken();
            return res;
        });
    }
    passwordVerify({ password }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.passwordVerify({ password });
            return res;
        });
    }
    pinVerify({ pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.pinVerify({ pin });
            return res;
        });
    }
    pinAndPasswordVerify({ triaName, pin, password }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.pinAndPasswordVerify({ triaName, pin, password });
            return res;
        });
    }
    deleteAccount({ password, pin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.deleteAccount({ password, pin });
            return res;
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.logout();
            return res;
        });
    }
    mockUnauthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.unauthenticated();
            return res;
        });
    }
    saveOauthUser({ userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.saveOauthUser({ userOauthId: userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash });
            return res;
        });
    }
    initiateOTP(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.initiateOTP({ input });
            return res;
        });
    }
    verifyOTP({ otp, session, input }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.verifyOTP({ otp, input, session });
            return res;
        });
    }
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.getSession();
            return res;
        });
    }
    getKey(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.getKey(accessToken);
            return res;
        });
    }
    checkLinkEmailExists({ email }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.checkLinkEmailExists({ email });
            return res;
        });
    }
    initiateEmailLinkAuth({ email, password, origin }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.initiateEmailLinkAuth({ email, password, origin });
            return res;
        });
    }
    emailLinkVerification({ email, code }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.auth.emailLinkVerification({ email, code });
            return res;
        });
    }
}
exports.AuthController = AuthController;
