import AuthService from "../services/auth";
import { Login, Register, UpdatePasswordArgs, UpdatePinArgs, PasswordVerifyArgs, PinAndPasswordVerifyArgs, PinVerifyArgs, PinVerifyResponse, PasswordVerifyResponse, PinAndPasswordVerifyResponse, DeleteAccount, DeleteAccountResponse } from "../types";
export declare class AuthController {
    baseUrl: string;
    auth: AuthService;
    constructor(baseUrl: string);
    login({ triaName, password, pin }: Login): Promise<any>;
    register({ username, usernameExtension, password, passwordVerify, pin }: Register): Promise<any>;
    updatePassword({ newPassword, oldPassword, pin, verifyNewPassword }: UpdatePasswordArgs): Promise<any>;
    updatePin({ newPin, oldPin, password, verifyNewPin }: UpdatePinArgs): Promise<any>;
    checkUsername(usernameWithExtension: string): Promise<unknown>;
    refreshToken(): Promise<any>;
    passwordVerify({ password }: PasswordVerifyArgs): Promise<PasswordVerifyResponse>;
    pinVerify({ pin }: PinVerifyArgs): Promise<PinVerifyResponse>;
    pinAndPasswordVerify({ triaName, pin, password }: PinAndPasswordVerifyArgs): Promise<PinAndPasswordVerifyResponse>;
    deleteAccount({ password, pin }: DeleteAccount): Promise<DeleteAccountResponse>;
    logout(): Promise<any>;
    mockUnauthenticated(): Promise<any>;
    saveOauthUser({ userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash }: {
        userOauthId: string;
        isPasswordRequired: boolean;
        password: string;
        platform: string;
        accessToken: string;
        triaNameHash: string;
    }): Promise<any>;
    initiateOTP(input: string): Promise<any>;
    verifyOTP({ otp, session, input }: {
        input: string;
        session: string;
        otp: string;
    }): Promise<any>;
    getSession(): Promise<any>;
    getKey(accessToken?: string): Promise<any>;
    checkLinkEmailExists({ email }: {
        email: string;
    }): Promise<any>;
    initiateEmailLinkAuth({ email, password, origin }: {
        email: string;
        password: string;
        origin?: string;
    }): Promise<any>;
    emailLinkVerification({ email, code }: {
        email: string;
        code: string;
    }): Promise<any>;
}
