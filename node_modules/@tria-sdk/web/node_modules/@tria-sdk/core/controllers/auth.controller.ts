import AuthService from "../services/auth";
import { Login, Register, UpdatePasswordArgs, UpdatePinArgs, PasswordVerifyArgs, PinAndPasswordVerifyArgs, PinVerifyArgs, PinVerifyResponse, PasswordVerifyResponse, PinAndPasswordVerifyResponse, DeleteAccount, DeleteAccountResponse } from "../types";

export class AuthController {
    baseUrl: string;
    auth: AuthService;

    constructor(baseUrl: string) {
        this.baseUrl = baseUrl;
        this.auth = new AuthService(baseUrl);
    }


    async login({ triaName, password, pin }: Login) {
        const res = await this.auth.login({ triaName, password, pin });
        return res;
    }

    async register({ username, usernameExtension, password, passwordVerify, pin }: Register) {
        const res = await this.auth.register({ username, usernameExtension, password, passwordVerify, pin });
        return res;
    }

    async updatePassword({ newPassword, oldPassword, pin, verifyNewPassword }: UpdatePasswordArgs) {
        const res = await this.auth.updatePassword({ newPassword, oldPassword, pin, verifyNewPassword });
        return res;
    }

    async updatePin({ newPin, oldPin, password, verifyNewPin }: UpdatePinArgs) {
        const res = await this.auth.updatePin({ newPin, oldPin, password, verifyNewPin });
        return res;
    }

    async checkUsername(usernameWithExtension: string) {
        const res = await this.auth.checkUsername({ usernameWithExtension });
        return res;
    }

    async refreshToken() {
        const res = await this.auth.refreshToken();
        return res;
    }

    async passwordVerify({ password }: PasswordVerifyArgs): Promise<PasswordVerifyResponse> {
        const res = await this.auth.passwordVerify({ password });
        return res;
    }
    async pinVerify({ pin }: PinVerifyArgs): Promise<PinVerifyResponse> {
        const res = await this.auth.pinVerify({ pin });
        return res;
    }
    async pinAndPasswordVerify({ triaName, pin, password }: PinAndPasswordVerifyArgs): Promise<PinAndPasswordVerifyResponse> {
        const res = await this.auth.pinAndPasswordVerify({ triaName, pin, password });
        return res;
    }

    async deleteAccount({ password, pin }: DeleteAccount): Promise<DeleteAccountResponse> {
        const res = await this.auth.deleteAccount({ password, pin });
        return res;
    }

    async logout() {
        const res = await this.auth.logout();
        return res;
    }

    async mockUnauthenticated() {
        const res = await this.auth.unauthenticated();
        return res;
    }

    async saveOauthUser({ userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash }: { userOauthId: string, isPasswordRequired: boolean, password: string, platform: string, accessToken: string, triaNameHash: string }) {
        const res = await this.auth.saveOauthUser({ userOauthId: userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash });
        return res;
    }

    async initiateOTP(input: string) {
        const res = await this.auth.initiateOTP({ input });
        return res;
    }

    async verifyOTP({ otp, session, input }: { input: string, session: string, otp: string }) {
        const res = await this.auth.verifyOTP({ otp, input, session });
        return res;
    }

    async getSession() {
        const res = await this.auth.getSession();
        return res;
    }

    async getKey(accessToken?: string) {
        const res = await this.auth.getKey(accessToken);
        return res;
    }


    async checkLinkEmailExists({ email }: { email: string }) {
        const res = await this.auth.checkLinkEmailExists({ email });
        return res;
    }
    async initiateEmailLinkAuth({ email, password, origin }: { email: string, password: string, origin?: string }) {
        const res = await this.auth.initiateEmailLinkAuth({ email, password, origin });
        return res;
    }
    async emailLinkVerification({ email, code }: { email: string, code: string }) {
        const res = await this.auth.emailLinkVerification({ email, code });
        return res;
    }
}