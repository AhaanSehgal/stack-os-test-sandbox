import { DeleteAccount, Login, PasswordVerifyArgs, PinAndPasswordVerifyArgs, PinVerifyArgs, Register, UpdatePasswordArgs, UpdatePinArgs } from "../types";
import BackendService from "./index";
import { errorHandler } from "../utils/helper";

class AuthService extends BackendService {
    constructor(apiUrl: string) {
        super(apiUrl);
    }

    async login({ triaName, password, pin }: Login) {
        try {
            const { data } = await this.triaAxios.post("/auth/login", {
                triaName,
                password,
                pin
            });
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async logout() {
        try {
            const { data } = await this.triaAxios.post("/auth/logout");
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async unauthenticated() {
        try {
            const { data } = await this.triaAxios.get("/unauthenticated");
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async deleteAccount({ password, pin }: DeleteAccount) {
        try {
            const { data } = await this.triaAxios.post("/auth/delete-account", {
                password,
                pin
            });
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }


    async register({ username, usernameExtension, password, passwordVerify, pin }: Register) {
        try {
            const { data } = await this.triaAxios.post("/auth/register", {
                username,
                usernameExtension,
                password,
                passwordVerify,
                pin
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async updatePassword({ newPassword, oldPassword, pin, verifyNewPassword }: UpdatePasswordArgs) {
        try {
            const { data } = await this.triaAxios.post("/auth/update-password", {
                newPassword,
                oldPassword,
                pin,
                verifyNewPassword
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async checkUsername({ usernameWithExtension }: { usernameWithExtension: string }) {
        try {
            const data = await this.triaAxios.get("/auth/check-username", {
                params: { usernameWithExtension: usernameWithExtension }
            });
            if (data.status === 409) {
                return { isExist: true, success: true }
            } else if (data.status === 202) {
                return { isExist: false, success: true }
            }
            return { isExist: null, success: false }
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async refreshToken() {
        try {
            const { data } = await this.triaAxios.post("/auth/refresh-token");
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }


    async passwordVerify({ password }: PasswordVerifyArgs) {
        try {
            const { data } = await this.triaAxios.post("/auth/password-verify", {
                password: password
            });
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async pinVerify({ pin }: PinVerifyArgs) {
        try {
            const { data } = await this.triaAxios.post("/auth/pin-verify", {
                pin: pin
            });
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }


    async pinAndPasswordVerify({ triaName, password, pin }: PinAndPasswordVerifyArgs) {
        try {
            const { data } = await this.triaAxios.post("/auth/password-pin-verify", {
                pin,
                triaName,
                password,
            });
            return data;
        } catch (err: unknown) {
            return errorHandler(err);
        }
    }

    async updatePin({ newPin, oldPin, password, verifyNewPin }: UpdatePinArgs) {
        try {
            const { data } = await this.triaAxios.post("/auth/update-pin", {
                newPin,
                password,
                oldPin,
                verifyNewPin
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async initiateOTP({ input }: { input: string }) {
        try {
            const { data } = await this.triaAxios.post("/auth/otp/initiate", {
                input
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async verifyOTP({ otp, session, input }: { input: string, session: string, otp: string }) {
        try {
            const { data } = await this.triaAxios.post("/auth/otp/verify", {
                otp,
                session,
                input
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async getSession() {
        try {
            const { data } = await this.triaAxios.get("/auth/issue-token");
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async getKey(accessToken?: string) {
        try {
            const { data } = await this.triaAxios.get("/auth/get-key", {
                headers: {
                    'Authorization': `Bearer ${accessToken}` // Set the Authorization header with the Bearer token
                }
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async saveOauthUser({ userOauthId, isPasswordRequired, password, platform, accessToken, triaNameHash }: { userOauthId: string, isPasswordRequired: boolean, password: string, platform: string, accessToken: string, triaNameHash: string }) {
        try {
            const { data } = await this.triaAxios.post("/auth/save-oauth-user", {
                triaNameHash,
                userOauthId,
                isPasswordRequired,
                password,
                platform
            }, {
                headers: {
                    'Authorization': `Bearer ${accessToken}` // Set the Authorization header with the Bearer token
                }
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async checkLinkEmailExists({ email }: { email: string }) {
        try {
            const { data } = await this.triaAxios.get("/auth/link/email-exists", {
                params: { email }
            });
            return data.emailExist;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async initiateEmailLinkAuth({ email, password, origin }: { email: string, password: string, origin?: string }) {
        try {
            const { data } = await this.triaAxios.post("/auth/link/initiate", {
                email, password, origin
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }

    async emailLinkVerification({ email, code }: { email: string, code: string }) {
        try {
            const { data } = await this.triaAxios.post("/auth/link/verify", {
                email, code
            });
            return data;
        } catch (err) {
            return errorHandler(err);
        }
    }
}

export default AuthService;