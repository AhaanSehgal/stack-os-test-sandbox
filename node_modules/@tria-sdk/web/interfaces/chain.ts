import { TxnResponse, FeeResponse, SwapTargetResponse } from '../types';
import { SendPayload, SwapPayload, CheckTokenAllowance, ApprovePayload } from '../types/chain';

export interface Chain {
  // not required in react-native sdk
  // createWallet(
  //   mnemonic: string,
  //   derivationPathIndex: number
  // ): Promise<{ address: string; privateKey: string }>;

  getBalance(address: string, tokenAddress?: string): Promise<any>;
  //   Promise<{ balance: number; balanceInUnits: number }>;
  getSendFee(
    fromAddress: string,
    recipientAddress: string,
    amount: number,
    tokenAddress?: string
  ): Promise<FeeResponse>;

  send(sendPayload: SendPayload): Promise<TxnResponse>;

  checkTokenAllowance?({
    accountAddress,
    tokenAddress,
    amount,
  }: CheckTokenAllowance): Promise<boolean>;

  getApproveFee?(
    fromAddress: string,
    tokenAddress: string,
    amount: number,
    contractAddress: string
  ): Promise<FeeResponse>;

  approve?(approvePayload: ApprovePayload): Promise<TxnResponse>;

  getSwapTargets?(
    fromTokenAddress: string | null,
    listLength: number,
    query?: string // for searching the symbol of a asset
  ): Promise<SwapTargetResponse[]>;

  getSwapFee?(
    fromAddress: string,
    fromTokenAddress: string,
    toTokenAddress: string,
    amount: number,
    slippage: number
  ): Promise<FeeResponse>;

  swap?(swapPayload: SwapPayload): Promise<TxnResponse>;
}
