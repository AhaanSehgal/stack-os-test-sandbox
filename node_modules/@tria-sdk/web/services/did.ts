import BackendService from './index';
import { errorHandler } from '../utils/helper';
import {
  checkDIDResponse,
  ShardExistsResponse,
  ShardStorageArgs,
  ShardStorageResponse,
  CreateDIDArgs,
  CreateDIDResponse,
} from '../types';
class DIDService extends BackendService {
  constructor(apiUrl: string) {
    super(apiUrl);
  }

  async createDID({ did, evmChainData, nonEvmChainsData }: CreateDIDArgs) {
    try {
      const { data } = await this.triaAxios.post('did/create', {
        did,
        evmChainData,
        nonEvmChainsData,
      });
      return data as CreateDIDResponse;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async checkDID(did: string) {
    try {
      const { data }: { data: checkDIDResponse } = await this.triaAxios.post('/did/check', {
        did: did,
      });
      if (data.success) {
        return data.response.availabilityStatus;
      } else {
        return false;
      }
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async shardStorage({ hash, link }: ShardStorageArgs) {
    try {
      const { data } = await this.triaAxios.post('did/shard-storage', {
        hash,
        link,
      });
      return data as ShardStorageResponse;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }

  async shardExists(hash: string) {
    try {
      const { data } = await this.triaAxios.post('did/shard-exists', {
        hash,
      });
      return data as ShardExistsResponse;
    } catch (err: unknown) {
      return errorHandler(err);
    }
  }
}

export default DIDService;
