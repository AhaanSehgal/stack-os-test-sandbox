import {
  RemoveAddressArgs,
  UpdateSubNameArgs,
  ResolveTriaName,
  AddNonEvmShards,
  ENV,
} from '../types';
import BackendService from './index';
import { errorHandler } from '../utils/helper';
import axios from 'axios';
import { getSubgraphUrl } from '../utils/constants';

class WalletService extends BackendService {
  constructor(apiUrl: string) {
    super(apiUrl);
  }

  async add(password: string, pin: string, chainName: string) {
    try {
      const { data } = await this.triaAxios.post(
        '/wallet/add',
        {
          password: password,
          chainName: chainName,
          pin: pin,
        },
        {}
      );
      return data;
    } catch (err) {
      return errorHandler(err);
    }
  }

  async updateSubName({ newSubName, oldSubName, password, pin }: UpdateSubNameArgs) {
    try {
      const { data } = await this.triaAxios.post('/wallet/update-subname', {
        newSubName,
        oldSubName,
        password,
        pin,
      });
      return data;
    } catch (err) {
      return errorHandler(err);
    }
  }

  async removeSubname({ subname, password, pin }: RemoveAddressArgs) {
    try {
      const { data } = await this.triaAxios.post('/wallet/remove-address', {
        subname,
        password,
        pin,
      });
      return data;
    } catch (err) {
      return errorHandler(err);
    }
  }

  async resolveTriaName(
    { chainName, lookUpTriaName }: ResolveTriaName,
    environment?: ENV
  ): Promise<{ address: string }> {
    try {
      const { data } = await this.triaAxios.post('/wallet/resolveTriaName', {
        chainName,
        lookUpTriaName,
      });
      return data;
    } catch (err) {
      throw Error('Unable to resolve DID.');
    }
  }

  // async resolveTriaNameSG(
  //   { chainName, lookUpTriaName }: ResolveTriaName,
  //   environment?: ENV
  // ): Promise<{ address: string }> {
  //   try {
  //     const did = lookUpTriaName;
  //     var data = JSON.stringify({
  //       query: `query MyQuery($id: ID!, $didName: String!, $chainNameVar: String!) {
  //         didToEvmAddress(id: $id) {
  //           did
  //           evmAddress
  //         }
  //         didToNonEvmAddresses(where: {did: $didName, chain_: {chainName: $chainNameVar}}) {
  //           did
  //           nonEvmAddress
  //           chain {
  //             id
  //             chainName
  //           }
  //         }
  //       }`,
  //       variables: { id: did, didName: did, chainNameVar: chainName },
  //     });

  //     var config = {
  //       method: 'post',
  //       url: getSubgraphUrl(environment),
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       data: data,
  //     };

  //     const { data: didData } = await axios(config);
  //     console.log({ didData });

  //     const evmAddress = didData?.data?.didToEvmAddress?.evmAddress;

  //     if (!evmAddress) throw Error('DID does not exist!');

  //     // if chainName is not in EVM
  //     // return didData.data.didToNonEvmAddresses[0].nonEvmAddress;
  //     return { address: evmAddress };
  //   } catch (err) {
  //     throw Error('Unable to resolve DID.');
  //   }
  // }

  async addNonEvmShards({ accountKeys }: AddNonEvmShards) {
    try {
      const { data } = await this.triaAxios.post('/wallet/add-nonEVMShards', {
        shardedAccountKeys: accountKeys,
      });
      return data;
    } catch (err) {
      return errorHandler(err);
    }
  }
}

export default WalletService;
