import { tornadoCashEnv } from './constants';

const appsConfig = (infraNodeName?: string, address?: string) => [
  {
    title: 'Gunbot',
    appName: `gunbot`,
    description: '',
    hostUrl: `gunbot-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'application',
    featured: false,
    enabled: false,
    necessaryApps: [
      {
        appName: `gunbot`,
        args: [],
        hostUrl: `gunbot-${address}-${infraNodeName}.stackos.io`,
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        image: { repository: 'kewlvishnu/gunthy-linux', tag: '0.0.18' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: { memory: '1450M', cpu: '1600m' },
        resourceRequests: { memory: '1450M', cpu: '1600m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: [
          {
            name: 'ReplaceUsername',
            value: 'root',
          },
          {
            name: 'ReplacePassword',
            value: 'password',
          },
        ],
        storageType: 'ssd-sc',
        storageSize: '15Gi',
        bandwidth: 1,
        cpuStandard: 1,
        volumeMounts: [
          {
            mountPath: '/app',
            name: `gunbot`,
          },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Tornado Cash',
    appName: 'tor',
    description:
      'Tornado Cash improves transaction privacy by breaking the on-chain link between source and destination.',
    hostUrl: `torweb-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/tornado-cash.svg',
    category: 'application',
    featured: true,
    enabled: true,
    necessaryApps: [
      {
        appName: `torweb`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torweb-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'tornadocash/ui',
          tag: 'latest',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '100M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '100M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'web',
      },
      {
        appName: `torworker`,
        args: ['worker'],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torworker-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'nyanit/tornado',
          tag: 'stackos',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '256M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: tornadoCashEnv(address),
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'worker',
      },
      {
        appName: `tortree`,
        args: ['treeWatcher'],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `tortree-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'nyanit/tornado',
          tag: 'stackos',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '256M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: tornadoCashEnv(address),
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'tree',
      },
      {
        appName: `torrelay`,
        args: ['server'],
        commands: [],
        containerPort: [{ port: 8000, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torrelay-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'nyanit/tornado',
          tag: 'stackos',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '256M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: tornadoCashEnv(address),
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'relay',
      },
      {
        appName: `torprice`,
        args: ['priceWatcher'],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torprice-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'nyanit/tornado',
          tag: 'stackos',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '256M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: tornadoCashEnv(address),
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'price',
      },
      {
        appName: `torhealth`,
        args: ['healthWatcher'],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torhealth-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'nyanit/tornado',
          tag: 'stackos',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        resourceRequests: { memory: '256M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        envVariables: tornadoCashEnv(address),
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'health',
      },
      {
        appName: `torredis`,
        args: [],
        commands: ['redis-server --appendonly yes'],
        containerPort: [{ port: 6379, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `torredis-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'redis',
          tag: '6.2',
        },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '64M',
          cpu: '250m',
        },
        resourceRequests: { memory: '64M', cpu: '250m' },
        servicePort: [{ port: 6379, protocol: 'TCP' }],
        envVariables: [],
        volumeMounts: [
          {
            mountPath: '/data',
            name: `torredis`,
          },
        ],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        whitelistedIps: ['0.0.0.0/0'],
        appendName: 'redis',
      },
    ],
  },
  {
    title: 'Ethereum Node',
    appName: 'ethereum',
    description:
      'With a full node you can participate in validating transactions and blocks on the Ethereum blockchain.',
    hostUrl: `ethereum-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/ethereum-node.svg',
    category: 'application',
    featured: true,
    enabled: true,
    necessaryApps: [
      {
        appName: `ethereum`,
        containerPort: [{ port: 8545, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `eth-testnet-${address}-${infraNodeName}.stackos.io`,
        officialImage: false,
        path: [`/`],
        persistenceEnabled: true,
        resourceLimits: { memory: '1100M', cpu: '350m' },
        resourceRequests: { memory: '1100M', cpu: '350m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        whitelistedIps: ['0.0.0.0/0'],
        envVariables: [],
        args: [
          '--db=/tmp',
          '--debug',
          '--account=0xe2b4f36af2b5206d8becc403cbfeecad0da89d7e79c7d15b35f5b9e535bb9d75,1000000000000000000000',
        ],
        volumeMounts: [
          {
            mountPath: '/tmp',
            name: 'ethereum',
          },
        ],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        image: { repository: 'trufflesuite/ganache-cli', tag: 'latest' },
      },
    ],
  },
  {
    title: 'Neo',
    appName: 'neo',
    description: 'This a testnet node for the Neo blockchain.',
    hostUrl: `neo-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/neo.svg',
    category: 'application',
    featured: true,
    enabled: true,
    necessaryApps: [
      {
        appName: `neo`,
        containerPort: [{ port: 30333, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `eth-testnet-${address}-${infraNodeName}.stackos.io`,
        officialImage: false,
        path: [`/`],
        persistenceEnabled: true,
        resourceLimits: { memory: '1100M', cpu: '350m' },
        resourceRequests: { memory: '1100M', cpu: '350m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        whitelistedIps: ['0.0.0.0/0'],
        volumeMounts: [
          {
            mountPath: '/tmp',
            name: 'neo',
          },
        ],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        envVariables: [],
        args: [],
        image: {
          repository: 'cityofzion/neo-privatenet',
          tag: 'latest',
        },
      },
    ],
  },
  {
    title: 'Neofrontier App',
    appName: 'hackathon',
    description: 'A react based Dapp for the Neo Hackathon.',
    hostUrl: `hackathon-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/neofrontier.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: 'hackathon',
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `hackathon-${address}-${infraNodeName}.stackos.io`,
        officialImage: false,
        path: [`/`],
        persistenceEnabled: false,
        resourceLimits: { memory: '100M', cpu: '100m' },
        resourceRequests: { memory: '100M', cpu: '100m' },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        whitelistedIps: ['0.0.0.0/0'],
        volumeMounts: [],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        envVariables: [],
        args: [],
        image: {
          repository: 'stackos/neo-frontier-app',
          tag: '0.5',
        },
      },
    ],
  },
  {
    title: 'Wordpress',
    appName: 'wpapp',
    description: 'It is a one click deployment of the wordpress application.',
    hostUrl: `wpapp-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/wordpress.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `wpapp`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `wpapp-${address}-${infraNodeName}.stackos.io`,
        image: {
          repository: 'wordpress',
          tag: 'latest',
        },
        officialImage: true,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: infraNodeName?.toLowerCase() === 'authority' ? '700M' : '150M',
          cpu: infraNodeName?.toLowerCase() === 'authority' ? '250m' : '150m',
        },
        resourceRequests: {
          memory: infraNodeName?.toLowerCase() === 'authority' ? '700M' : '150M',
          cpu: infraNodeName?.toLowerCase() === 'authority' ? '250m' : '150m',
        },
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/var/www/html',
            name: `wpapp`,
          },
        ],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        envVariables: [
          {
            name: 'WORDPRESS_DB_HOST',
            value: `wpappdb-${address}`,
          },
          { name: 'WORDPRESS_DB_USER', value: 'user' },
          { name: 'WORDPRESS_DB_PASSWORD', value: 'password' },
          { name: 'WORDPRESS_DB_NAME', value: 'sqldb' },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
      {
        appName: `wpappdb`,
        args: [],
        commands: [],
        containerPort: [{ port: 3306, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `wpappdb-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'mariadb', tag: '10.7' },
        officialImage: true,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: infraNodeName?.toLowerCase() === 'authority' ? '300M' : '150M',
          cpu: infraNodeName?.toLowerCase() === 'authority' ? '250m' : '150m',
        },
        resourceRequests: {
          memory: infraNodeName?.toLowerCase() === 'authority' ? '300M' : '150M',
          cpu: infraNodeName?.toLowerCase() === 'authority' ? '250m' : '150m',
        },
        servicePort: [{ port: 3306, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/var/lib/mysql',
            name: `wpappdb`,
          },
        ],
        bandwidth: 1,
        cpuStandard: 1,
        storageType: 'standard',
        storageSize: '1Gi',
        envVariables: [
          {
            name: 'MYSQL_DATABASE',
            value: 'sqldb',
          },
          { name: 'MYSQL_USER', value: 'user' },
          { name: 'MYSQL_PASSWORD', value: 'password' },
          { name: 'MYSQL_RANDOM_ROOT_PASSWORD', value: "'1'" },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'NodePortal',
    appName: 'nodes',
    description: 'This is the portal for interacting with StackOS node NFTs.',
    hostUrl: `nodes-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `nodes`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `nodePortal-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'karthikghan/node-portal', tag: 'prod-4.0' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '50M',
          cpu: '50m',
        },
        resourceRequests: {
          memory: '50M',
          cpu: '50m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        replicaCount: 2,
        envVariables: [
          {
            name: 'REACT_APP_NODE_PORTAL_WALLET_ADDRESS',
            value: address,
          },
          {
            name: 'REACT_APP_ANYONE_CAN_ACCESS',
            value: `"false"`,
          },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Influx DB',
    appName: 'influx',
    description: 'This is a one click setup of an Influx DB.',
    hostUrl: `influx-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/influx-db.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `influx`,
        args: [],
        commands: [],
        containerPort: [{ port: 8086, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `influx-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'stackos/influxdb', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '1024M',
          cpu: '1024m',
        },
        resourceRequests: {
          memory: '1024M',
          cpu: '1024m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 8086, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/pdata',
            name: `influx`,
          },
        ],
        storageType: 'standard',
        storageSize: '10Gi',
        envVariables: [
          {
            name: 'PERSIST_PATH',
            value: `/pdata`,
          },
          { name: 'DOCKER_INFLUXDB_INIT_MODE', value: 'setup' },
          { name: 'DOCKER_INFLUXDB_INIT_USERNAME', value: 'user1' },
          { name: 'DOCKER_INFLUXDB_INIT_PASSWORD', value: 'pass1234' },
          {
            name: 'DOCKER_INFLUXDB_INIT_ORG',
            value: `acme`,
          },
          { name: 'DOCKER_INFLUXDB_INIT_BUCKET', value: 'demo' },
          { name: 'DOCKER_INFLUXDB_INIT_RETENTION', value: '1w' },
          { name: 'DOCKER_INFLUXDB_INIT_ADMIN_TOKEN', value: 'secrettoken' },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Elastic Search',
    appName: 'elastic',
    description: 'It is a one click deployment of an Elastic Search instance.',
    hostUrl: `elastic-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/elastic-search.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `elastic`,
        args: [],
        commands: [],
        containerPort: [{ port: 9200, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `elastic-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'stackos/elastic', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '1024M',
          cpu: '500m',
        },
        resourceRequests: {
          memory: '1024M',
          cpu: '500m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 9200, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/pdata',
            name: `elastic`,
          },
        ],
        storageType: 'standard',
        storageSize: '5Gi',
        envVariables: [
          {
            name: 'PERSIST_PATH',
            value: `/pdata`,
          },
          { name: 'discovery.type', value: 'single-node' },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'IPFS',
    appName: 'ipfs',
    description: '',
    hostUrl: `ipfs-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'application',
    featured: false,
    enabled: false,
    necessaryApps: [
      {
        appName: `ipfs`,
        args: [],
        commands: [],
        containerPort: [{ port: 8080, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `ipfs-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'nyanit/go-ipfs', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '64M',
          cpu: '500m',
        },
        resourceRequests: {
          memory: '64M',
          cpu: '500m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/pdata/ipfs',
            name: `ipfs`,
          },
        ],
        storageType: 'standard',
        storageSize: '5Gi',
        envVariables: [
          {
            name: 'IPFS_PATH',
            value: `/pdata/ipfs`,
          },
        ],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Zoo Keeper',
    appName: 'zk',
    description: 'A one click solution to get a zoo keeper installed.',
    hostUrl: `zk01-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/zoo-keeper.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `zk01`,
        args: [],
        commands: [],
        containerPort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        infraNodeName,
        hostUrl: `zk01-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'nyanit/zookeeper', tag: '3.7-stackos' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '512M',
          cpu: '500m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '500m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        envVariables: [
          {
            name: 'ZOO_MY_ID',
            value: `"1"`,
          },
          {
            name: 'ZOO_SERVERS',
            value: `server.1=0.0.0.0:2888:3888;2181 server.2=zk02-${address}:2888:3888;2181 server.3=zk03-${address}:2888:3888;2181`,
          },
          {
            name: 'ZOO_INIT_LIMIT',
            value: `"100"`,
          },
          {
            name: 'ZOO_STANDALONE_ENABLED',
            value: `"false"`,
          },
          {
            name: 'ZOO_4LW_COMMANDS_WHITELIST',
            value: `"*"`,
          },
          {
            name: 'PERSIST_PATH',
            value: `/pdata`,
          },
        ],
        volumeMounts: [
          {
            mountPath: '/pdata',
            name: `zk01`,
          },
        ],
        storageType: 'standard',
        storageSize: '3Gi',
        whitelistedIps: ['0.0.0.0/0'],
        appendName: '01',
      },
      {
        appName: `zk02`,
        args: [],
        commands: [],
        containerPort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        infraNodeName,
        hostUrl: `zk02-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'nyanit/zookeeper', tag: '3.7-stackos' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '512M',
          cpu: '500m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '500m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        envVariables: [
          {
            name: 'ZOO_MY_ID',
            value: `"2"`,
          },
          {
            name: 'ZOO_SERVERS',
            value: `server.1=zk01-${address}:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zk03-${address}:2888:3888;2181`,
          },
          {
            name: 'ZOO_INIT_LIMIT',
            value: `"100"`,
          },
          {
            name: 'ZOO_STANDALONE_ENABLED',
            value: `"false"`,
          },
          {
            name: 'ZOO_4LW_COMMANDS_WHITELIST',
            value: `"*"`,
          },
          {
            name: 'PERSIST_PATH',
            value: `/pdata`,
          },
        ],
        volumeMounts: [
          {
            mountPath: '/pdata',
            name: `zk02`,
          },
        ],
        storageType: 'standard',
        storageSize: '3Gi',
        whitelistedIps: ['0.0.0.0/0'],
        appendName: '02',
      },
      {
        appName: `zk03`,
        args: [],
        commands: [],
        containerPort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        infraNodeName,
        hostUrl: `zk03-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'nyanit/zookeeper', tag: '3.7-stackos' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '512M',
          cpu: '500m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '500m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [
          { port: 2181, protocol: 'TCP' },
          { port: 2888, protocol: 'TCP' },
          { port: 3888, protocol: 'TCP' },
        ],
        envVariables: [
          {
            name: 'ZOO_MY_ID',
            value: `"3"`,
          },
          {
            name: 'ZOO_SERVERS',
            value: `server.1=zk01-${address}:2888:3888;2181 server.2=zk02-${address}:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181`,
          },
          {
            name: 'ZOO_INIT_LIMIT',
            value: `"100"`,
          },

          {
            name: 'ZOO_STANDALONE_ENABLED',
            value: `"false"`,
          },
          {
            name: 'ZOO_4LW_COMMANDS_WHITELIST',
            value: `"*"`,
          },
          {
            name: 'PERSIST_PATH',
            value: `/pdata`,
          },
        ],
        volumeMounts: [
          {
            mountPath: '/pdata',
            name: `zk03`,
          },
        ],
        storageType: 'standard',
        storageSize: '3Gi',
        whitelistedIps: ['0.0.0.0/0'],
        appendName: '03',
      },
    ],
  },
  {
    title: 'Redis',
    appName: 'redis',
    description: 'It is a one click deplpyment of redis instance.',
    hostUrl: `redis-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/redis.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `redis`,
        args: [],
        envVariables: [],
        containerPort: [{ port: 6379, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `redis-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'redis', tag: '6.2' },
        officialImage: true,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '64M',
          cpu: '200m',
        },
        resourceRequests: {
          memory: '64M',
          cpu: '200m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 6379, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/data',
            name: `redis`,
          },
        ],
        storageType: 'standard',
        storageSize: '1Gi',
        commands: ['redis-server --appendonly yes'],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Presearch',
    appName: 'presearch',
    description: 'This is a presearch node that deplys in a click.',
    hostUrl: `presearch-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/presearch.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `presearch`,
        args: [],
        envVariables: [
          {
            name: 'REGISTRATION_CODE',
            value: `YOUR_CODE`,
          },
        ],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `presearch-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'presearch/node', tag: '0.9.65-testnet' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: true,
        resourceLimits: {
          memory: '4096m',
          cpu: '2000M',
        },
        resourceRequests: {
          memory: '4096m',
          cpu: '2000M',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/app/node',
            name: `presearch`,
          },
        ],
        storageType: 'standard',
        storageSize: '1Gi',
        commands: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    title: 'Memcached',
    appName: `memcached`,
    description: 'Its a one click deployment of Memcached.',
    hostUrl: `memcached-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/memcached.svg',
    category: 'application',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `memcached`,
        args: [],
        envVariables: [],
        containerPort: [{ port: 11211, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `memcached-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'memcached', tag: '1.6' },
        officialImage: true,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '256M',
          cpu: '100m',
        },
        resourceRequests: {
          memory: '256M',
          cpu: '100m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 11211, protocol: 'TCP' }],
        volumeMounts: [],
        storageType: 'standard',
        storageSize: '1Gi',
        commands: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    description: 'Mongo',
    appName: 'mongo',
    hostUrl: `mongo-${address}-${infraNodeName}.stackos.io`,
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'application',
    featured: false,
    enabled: false,
    necessaryApps: [
      {
        appName: `mongo`,
        args: [],
        envVariables: [],
        containerPort: [{ port: 27017, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `mongo-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'mongo', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '1024M',
          cpu: '1000m',
        },
        resourceRequests: {
          memory: '1024M',
          cpu: '1000m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 27017, protocol: 'TCP' }],
        volumeMounts: [
          {
            mountPath: '/data/db',
            name: `mongo`,
          },
        ],
        storageType: 'standard',
        storageSize: '10Gi',
        commands: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'sm',
    hostUrl: `sm-${address}-${infraNodeName}.stackos.io`,
    title: 'Super Mario',
    description: 'DEploy and run Mario game.',
    coverImage: '/assets/app-store/super-mario.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `sm`,
        args: [],
        commands: [],
        containerPort: [{ port: 8080, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `sm-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/supermario', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'tetris',
    hostUrl: `tetris-${address}-${infraNodeName}.stackos.io`,
    title: 'Tetris',
    description: 'This is a one click deployment of a tetris game.',
    coverImage: '/assets/app-store/tetris.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `tetris`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `tetris-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/tetris', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'doom',
    hostUrl: `doom-${address}-${infraNodeName}.stackos.io`,
    title: 'Doom',
    description: 'This is a one click deployment of Doom game.',
    coverImage: '/assets/app-store/doom.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `doom`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `doom-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/doom', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'keen',
    hostUrl: `keen-${address}-${infraNodeName}.stackos.io`,
    title: 'Keen',
    description: 'This is a one click deployment of a Kleem game.',
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'game',
    featured: false,
    enabled: false,
    necessaryApps: [
      {
        appName: `keen`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `keen-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/keen', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'nintendo',
    hostUrl: `nintendo-${address}-${infraNodeName}.stackos.io`,
    title: 'Nintendo',
    description: 'This is a one click deployment of Nintendo app.',
    coverImage: '/assets/app-store/placeholder.svg',
    category: 'game',
    featured: false,
    enabled: false,
    necessaryApps: [
      {
        appName: `nintendo`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `nintendo-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/nintendo', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'snake',
    hostUrl: `snake-${address}-${infraNodeName}.stackos.io`,
    title: 'Snake',
    description: 'It is a one clink deployment of sname game.',
    coverImage: '/assets/app-store/snake.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `snake`,
        args: [],
        commands: [],
        containerPort: [{ port: 8080, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `snake-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/snake', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'hexgl',
    hostUrl: `hexgl-${address}-${infraNodeName}.stackos.io`,
    title: 'HEX GL',
    description: 'This is a one click deployment of HexGL.',
    coverImage: '/assets/app-store/hexgl.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `hexgl`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `hexgl-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'nyanit/hexgl', tag: 'v1' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
  {
    appName: 'bounceback',
    hostUrl: `bounceback-${address}-${infraNodeName}.stackos.io`,
    title: 'Bounce Back',
    description: 'Thisis a one click deplyment of a Bounceback game.',
    coverImage: '/assets/app-store/bounce-back.svg',
    category: 'game',
    featured: false,
    enabled: true,
    necessaryApps: [
      {
        appName: `bounceback`,
        args: [],
        commands: [],
        containerPort: [{ port: 80, protocol: 'TCP' }],
        infraNodeName,
        hostUrl: `bounceback-${address}-${infraNodeName}.stackos.io`,
        image: { repository: 'johnjayaraj/bounceback', tag: 'latest' },
        officialImage: false,
        path: ['/'],
        persistenceEnabled: false,
        resourceLimits: {
          memory: '512M',
          cpu: '512m',
        },
        resourceRequests: {
          memory: '512M',
          cpu: '512m',
        },
        bandwidth: 1,
        cpuStandard: 1,
        servicePort: [{ port: 80, protocol: 'TCP' }],
        volumeMounts: [],
        envVariables: [],
        whitelistedIps: ['0.0.0.0/0'],
      },
    ],
  },
];

export default appsConfig;
